// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"servicediscoverer/ent/endpointdata"
	"servicediscoverer/ent/predicate"
	"servicediscoverer/ent/providerendpoint"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EndpointDataUpdate is the builder for updating EndpointData entities.
type EndpointDataUpdate struct {
	config
	hooks    []Hook
	mutation *EndpointDataMutation
}

// Where appends a list predicates to the EndpointDataUpdate builder.
func (edu *EndpointDataUpdate) Where(ps ...predicate.EndpointData) *EndpointDataUpdate {
	edu.mutation.Where(ps...)
	return edu
}

// SetDataName sets the "dataName" field.
func (edu *EndpointDataUpdate) SetDataName(s string) *EndpointDataUpdate {
	edu.mutation.SetDataName(s)
	return edu
}

// SetDiscription sets the "discription" field.
func (edu *EndpointDataUpdate) SetDiscription(s string) *EndpointDataUpdate {
	edu.mutation.SetDiscription(s)
	return edu
}

// SetType sets the "type" field.
func (edu *EndpointDataUpdate) SetType(s string) *EndpointDataUpdate {
	edu.mutation.SetType(s)
	return edu
}

// SetEndpointRequiredID sets the "endpointRequired" edge to the ProviderEndpoint entity by ID.
func (edu *EndpointDataUpdate) SetEndpointRequiredID(id int) *EndpointDataUpdate {
	edu.mutation.SetEndpointRequiredID(id)
	return edu
}

// SetNillableEndpointRequiredID sets the "endpointRequired" edge to the ProviderEndpoint entity by ID if the given value is not nil.
func (edu *EndpointDataUpdate) SetNillableEndpointRequiredID(id *int) *EndpointDataUpdate {
	if id != nil {
		edu = edu.SetEndpointRequiredID(*id)
	}
	return edu
}

// SetEndpointRequired sets the "endpointRequired" edge to the ProviderEndpoint entity.
func (edu *EndpointDataUpdate) SetEndpointRequired(p *ProviderEndpoint) *EndpointDataUpdate {
	return edu.SetEndpointRequiredID(p.ID)
}

// SetEndpointProvidedID sets the "endpointProvided" edge to the ProviderEndpoint entity by ID.
func (edu *EndpointDataUpdate) SetEndpointProvidedID(id int) *EndpointDataUpdate {
	edu.mutation.SetEndpointProvidedID(id)
	return edu
}

// SetNillableEndpointProvidedID sets the "endpointProvided" edge to the ProviderEndpoint entity by ID if the given value is not nil.
func (edu *EndpointDataUpdate) SetNillableEndpointProvidedID(id *int) *EndpointDataUpdate {
	if id != nil {
		edu = edu.SetEndpointProvidedID(*id)
	}
	return edu
}

// SetEndpointProvided sets the "endpointProvided" edge to the ProviderEndpoint entity.
func (edu *EndpointDataUpdate) SetEndpointProvided(p *ProviderEndpoint) *EndpointDataUpdate {
	return edu.SetEndpointProvidedID(p.ID)
}

// Mutation returns the EndpointDataMutation object of the builder.
func (edu *EndpointDataUpdate) Mutation() *EndpointDataMutation {
	return edu.mutation
}

// ClearEndpointRequired clears the "endpointRequired" edge to the ProviderEndpoint entity.
func (edu *EndpointDataUpdate) ClearEndpointRequired() *EndpointDataUpdate {
	edu.mutation.ClearEndpointRequired()
	return edu
}

// ClearEndpointProvided clears the "endpointProvided" edge to the ProviderEndpoint entity.
func (edu *EndpointDataUpdate) ClearEndpointProvided() *EndpointDataUpdate {
	edu.mutation.ClearEndpointProvided()
	return edu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edu *EndpointDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(edu.hooks) == 0 {
		affected, err = edu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EndpointDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			edu.mutation = mutation
			affected, err = edu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(edu.hooks) - 1; i >= 0; i-- {
			if edu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = edu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, edu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (edu *EndpointDataUpdate) SaveX(ctx context.Context) int {
	affected, err := edu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edu *EndpointDataUpdate) Exec(ctx context.Context) error {
	_, err := edu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edu *EndpointDataUpdate) ExecX(ctx context.Context) {
	if err := edu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (edu *EndpointDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   endpointdata.Table,
			Columns: endpointdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: endpointdata.FieldID,
			},
		},
	}
	if ps := edu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edu.mutation.DataName(); ok {
		_spec.SetField(endpointdata.FieldDataName, field.TypeString, value)
	}
	if value, ok := edu.mutation.Discription(); ok {
		_spec.SetField(endpointdata.FieldDiscription, field.TypeString, value)
	}
	if value, ok := edu.mutation.GetType(); ok {
		_spec.SetField(endpointdata.FieldType, field.TypeString, value)
	}
	if edu.mutation.EndpointRequiredCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpointdata.EndpointRequiredTable,
			Columns: []string{endpointdata.EndpointRequiredColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerendpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.EndpointRequiredIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpointdata.EndpointRequiredTable,
			Columns: []string{endpointdata.EndpointRequiredColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerendpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if edu.mutation.EndpointProvidedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpointdata.EndpointProvidedTable,
			Columns: []string{endpointdata.EndpointProvidedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerendpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.EndpointProvidedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpointdata.EndpointProvidedTable,
			Columns: []string{endpointdata.EndpointProvidedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerendpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpointdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EndpointDataUpdateOne is the builder for updating a single EndpointData entity.
type EndpointDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EndpointDataMutation
}

// SetDataName sets the "dataName" field.
func (eduo *EndpointDataUpdateOne) SetDataName(s string) *EndpointDataUpdateOne {
	eduo.mutation.SetDataName(s)
	return eduo
}

// SetDiscription sets the "discription" field.
func (eduo *EndpointDataUpdateOne) SetDiscription(s string) *EndpointDataUpdateOne {
	eduo.mutation.SetDiscription(s)
	return eduo
}

// SetType sets the "type" field.
func (eduo *EndpointDataUpdateOne) SetType(s string) *EndpointDataUpdateOne {
	eduo.mutation.SetType(s)
	return eduo
}

// SetEndpointRequiredID sets the "endpointRequired" edge to the ProviderEndpoint entity by ID.
func (eduo *EndpointDataUpdateOne) SetEndpointRequiredID(id int) *EndpointDataUpdateOne {
	eduo.mutation.SetEndpointRequiredID(id)
	return eduo
}

// SetNillableEndpointRequiredID sets the "endpointRequired" edge to the ProviderEndpoint entity by ID if the given value is not nil.
func (eduo *EndpointDataUpdateOne) SetNillableEndpointRequiredID(id *int) *EndpointDataUpdateOne {
	if id != nil {
		eduo = eduo.SetEndpointRequiredID(*id)
	}
	return eduo
}

// SetEndpointRequired sets the "endpointRequired" edge to the ProviderEndpoint entity.
func (eduo *EndpointDataUpdateOne) SetEndpointRequired(p *ProviderEndpoint) *EndpointDataUpdateOne {
	return eduo.SetEndpointRequiredID(p.ID)
}

// SetEndpointProvidedID sets the "endpointProvided" edge to the ProviderEndpoint entity by ID.
func (eduo *EndpointDataUpdateOne) SetEndpointProvidedID(id int) *EndpointDataUpdateOne {
	eduo.mutation.SetEndpointProvidedID(id)
	return eduo
}

// SetNillableEndpointProvidedID sets the "endpointProvided" edge to the ProviderEndpoint entity by ID if the given value is not nil.
func (eduo *EndpointDataUpdateOne) SetNillableEndpointProvidedID(id *int) *EndpointDataUpdateOne {
	if id != nil {
		eduo = eduo.SetEndpointProvidedID(*id)
	}
	return eduo
}

// SetEndpointProvided sets the "endpointProvided" edge to the ProviderEndpoint entity.
func (eduo *EndpointDataUpdateOne) SetEndpointProvided(p *ProviderEndpoint) *EndpointDataUpdateOne {
	return eduo.SetEndpointProvidedID(p.ID)
}

// Mutation returns the EndpointDataMutation object of the builder.
func (eduo *EndpointDataUpdateOne) Mutation() *EndpointDataMutation {
	return eduo.mutation
}

// ClearEndpointRequired clears the "endpointRequired" edge to the ProviderEndpoint entity.
func (eduo *EndpointDataUpdateOne) ClearEndpointRequired() *EndpointDataUpdateOne {
	eduo.mutation.ClearEndpointRequired()
	return eduo
}

// ClearEndpointProvided clears the "endpointProvided" edge to the ProviderEndpoint entity.
func (eduo *EndpointDataUpdateOne) ClearEndpointProvided() *EndpointDataUpdateOne {
	eduo.mutation.ClearEndpointProvided()
	return eduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eduo *EndpointDataUpdateOne) Select(field string, fields ...string) *EndpointDataUpdateOne {
	eduo.fields = append([]string{field}, fields...)
	return eduo
}

// Save executes the query and returns the updated EndpointData entity.
func (eduo *EndpointDataUpdateOne) Save(ctx context.Context) (*EndpointData, error) {
	var (
		err  error
		node *EndpointData
	)
	if len(eduo.hooks) == 0 {
		node, err = eduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EndpointDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eduo.mutation = mutation
			node, err = eduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eduo.hooks) - 1; i >= 0; i-- {
			if eduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EndpointData)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EndpointDataMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eduo *EndpointDataUpdateOne) SaveX(ctx context.Context) *EndpointData {
	node, err := eduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eduo *EndpointDataUpdateOne) Exec(ctx context.Context) error {
	_, err := eduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eduo *EndpointDataUpdateOne) ExecX(ctx context.Context) {
	if err := eduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eduo *EndpointDataUpdateOne) sqlSave(ctx context.Context) (_node *EndpointData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   endpointdata.Table,
			Columns: endpointdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: endpointdata.FieldID,
			},
		},
	}
	id, ok := eduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EndpointData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, endpointdata.FieldID)
		for _, f := range fields {
			if !endpointdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != endpointdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eduo.mutation.DataName(); ok {
		_spec.SetField(endpointdata.FieldDataName, field.TypeString, value)
	}
	if value, ok := eduo.mutation.Discription(); ok {
		_spec.SetField(endpointdata.FieldDiscription, field.TypeString, value)
	}
	if value, ok := eduo.mutation.GetType(); ok {
		_spec.SetField(endpointdata.FieldType, field.TypeString, value)
	}
	if eduo.mutation.EndpointRequiredCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpointdata.EndpointRequiredTable,
			Columns: []string{endpointdata.EndpointRequiredColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerendpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.EndpointRequiredIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpointdata.EndpointRequiredTable,
			Columns: []string{endpointdata.EndpointRequiredColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerendpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eduo.mutation.EndpointProvidedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpointdata.EndpointProvidedTable,
			Columns: []string{endpointdata.EndpointProvidedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerendpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.EndpointProvidedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   endpointdata.EndpointProvidedTable,
			Columns: []string{endpointdata.EndpointProvidedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerendpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EndpointData{config: eduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpointdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
