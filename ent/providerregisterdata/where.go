// Code generated by ent, DO NOT EDIT.

package providerregisterdata

import (
	"servicediscoverer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// LiveInterval applies equality check predicate on the "liveInterval" field. It's identical to LiveIntervalEQ.
func LiveInterval(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveInterval), v))
	})
}

// LiveTimeout applies equality check predicate on the "liveTimeout" field. It's identical to LiveTimeoutEQ.
func LiveTimeout(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveTimeout), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPort), v))
	})
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...string) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPort), v...))
	})
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...string) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPort), v...))
	})
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPort), v))
	})
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPort), v))
	})
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPort), v))
	})
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPort), v))
	})
}

// PortContains applies the Contains predicate on the "port" field.
func PortContains(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPort), v))
	})
}

// PortHasPrefix applies the HasPrefix predicate on the "port" field.
func PortHasPrefix(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPort), v))
	})
}

// PortHasSuffix applies the HasSuffix predicate on the "port" field.
func PortHasSuffix(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPort), v))
	})
}

// PortEqualFold applies the EqualFold predicate on the "port" field.
func PortEqualFold(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPort), v))
	})
}

// PortContainsFold applies the ContainsFold predicate on the "port" field.
func PortContainsFold(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPort), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// LiveIntervalEQ applies the EQ predicate on the "liveInterval" field.
func LiveIntervalEQ(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveInterval), v))
	})
}

// LiveIntervalNEQ applies the NEQ predicate on the "liveInterval" field.
func LiveIntervalNEQ(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiveInterval), v))
	})
}

// LiveIntervalIn applies the In predicate on the "liveInterval" field.
func LiveIntervalIn(vs ...int) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLiveInterval), v...))
	})
}

// LiveIntervalNotIn applies the NotIn predicate on the "liveInterval" field.
func LiveIntervalNotIn(vs ...int) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLiveInterval), v...))
	})
}

// LiveIntervalGT applies the GT predicate on the "liveInterval" field.
func LiveIntervalGT(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiveInterval), v))
	})
}

// LiveIntervalGTE applies the GTE predicate on the "liveInterval" field.
func LiveIntervalGTE(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiveInterval), v))
	})
}

// LiveIntervalLT applies the LT predicate on the "liveInterval" field.
func LiveIntervalLT(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiveInterval), v))
	})
}

// LiveIntervalLTE applies the LTE predicate on the "liveInterval" field.
func LiveIntervalLTE(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiveInterval), v))
	})
}

// LiveTimeoutEQ applies the EQ predicate on the "liveTimeout" field.
func LiveTimeoutEQ(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveTimeout), v))
	})
}

// LiveTimeoutNEQ applies the NEQ predicate on the "liveTimeout" field.
func LiveTimeoutNEQ(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiveTimeout), v))
	})
}

// LiveTimeoutIn applies the In predicate on the "liveTimeout" field.
func LiveTimeoutIn(vs ...int) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLiveTimeout), v...))
	})
}

// LiveTimeoutNotIn applies the NotIn predicate on the "liveTimeout" field.
func LiveTimeoutNotIn(vs ...int) predicate.ProviderRegisterData {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLiveTimeout), v...))
	})
}

// LiveTimeoutGT applies the GT predicate on the "liveTimeout" field.
func LiveTimeoutGT(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLiveTimeout), v))
	})
}

// LiveTimeoutGTE applies the GTE predicate on the "liveTimeout" field.
func LiveTimeoutGTE(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLiveTimeout), v))
	})
}

// LiveTimeoutLT applies the LT predicate on the "liveTimeout" field.
func LiveTimeoutLT(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLiveTimeout), v))
	})
}

// LiveTimeoutLTE applies the LTE predicate on the "liveTimeout" field.
func LiveTimeoutLTE(v int) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLiveTimeout), v))
	})
}

// HasEndpoints applies the HasEdge predicate on the "endpoints" edge.
func HasEndpoints() predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EndpointsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EndpointsTable, EndpointsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEndpointsWith applies the HasEdge predicate on the "endpoints" edge with a given conditions (other predicates).
func HasEndpointsWith(preds ...predicate.ProviderEndpoint) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EndpointsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EndpointsTable, EndpointsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProviderRegisterData) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProviderRegisterData) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProviderRegisterData) predicate.ProviderRegisterData {
	return predicate.ProviderRegisterData(func(s *sql.Selector) {
		p(s.Not())
	})
}
