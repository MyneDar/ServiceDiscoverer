// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"servicediscoverer/ent/endpointdata"
	"servicediscoverer/ent/predicate"
	"servicediscoverer/ent/providerendpoint"
	"servicediscoverer/ent/providerregisterdata"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProviderEndpointQuery is the builder for querying ProviderEndpoint entities.
type ProviderEndpointQuery struct {
	config
	limit            *int
	offset           *int
	unique           *bool
	order            []OrderFunc
	fields           []string
	predicates       []predicate.ProviderEndpoint
	withRequiredData *EndpointDataQuery
	withProvidedData *EndpointDataQuery
	withProvider     *ProviderRegisterDataQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProviderEndpointQuery builder.
func (peq *ProviderEndpointQuery) Where(ps ...predicate.ProviderEndpoint) *ProviderEndpointQuery {
	peq.predicates = append(peq.predicates, ps...)
	return peq
}

// Limit adds a limit step to the query.
func (peq *ProviderEndpointQuery) Limit(limit int) *ProviderEndpointQuery {
	peq.limit = &limit
	return peq
}

// Offset adds an offset step to the query.
func (peq *ProviderEndpointQuery) Offset(offset int) *ProviderEndpointQuery {
	peq.offset = &offset
	return peq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (peq *ProviderEndpointQuery) Unique(unique bool) *ProviderEndpointQuery {
	peq.unique = &unique
	return peq
}

// Order adds an order step to the query.
func (peq *ProviderEndpointQuery) Order(o ...OrderFunc) *ProviderEndpointQuery {
	peq.order = append(peq.order, o...)
	return peq
}

// QueryRequiredData chains the current query on the "required_data" edge.
func (peq *ProviderEndpointQuery) QueryRequiredData() *EndpointDataQuery {
	query := &EndpointDataQuery{config: peq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := peq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := peq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerendpoint.Table, providerendpoint.FieldID, selector),
			sqlgraph.To(endpointdata.Table, endpointdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providerendpoint.RequiredDataTable, providerendpoint.RequiredDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(peq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvidedData chains the current query on the "provided_data" edge.
func (peq *ProviderEndpointQuery) QueryProvidedData() *EndpointDataQuery {
	query := &EndpointDataQuery{config: peq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := peq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := peq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerendpoint.Table, providerendpoint.FieldID, selector),
			sqlgraph.To(endpointdata.Table, endpointdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providerendpoint.ProvidedDataTable, providerendpoint.ProvidedDataColumn),
		)
		fromU = sqlgraph.SetNeighbors(peq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvider chains the current query on the "provider" edge.
func (peq *ProviderEndpointQuery) QueryProvider() *ProviderRegisterDataQuery {
	query := &ProviderRegisterDataQuery{config: peq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := peq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := peq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerendpoint.Table, providerendpoint.FieldID, selector),
			sqlgraph.To(providerregisterdata.Table, providerregisterdata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, providerendpoint.ProviderTable, providerendpoint.ProviderColumn),
		)
		fromU = sqlgraph.SetNeighbors(peq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProviderEndpoint entity from the query.
// Returns a *NotFoundError when no ProviderEndpoint was found.
func (peq *ProviderEndpointQuery) First(ctx context.Context) (*ProviderEndpoint, error) {
	nodes, err := peq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{providerendpoint.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (peq *ProviderEndpointQuery) FirstX(ctx context.Context) *ProviderEndpoint {
	node, err := peq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProviderEndpoint ID from the query.
// Returns a *NotFoundError when no ProviderEndpoint ID was found.
func (peq *ProviderEndpointQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = peq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{providerendpoint.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (peq *ProviderEndpointQuery) FirstIDX(ctx context.Context) int {
	id, err := peq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProviderEndpoint entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProviderEndpoint entity is found.
// Returns a *NotFoundError when no ProviderEndpoint entities are found.
func (peq *ProviderEndpointQuery) Only(ctx context.Context) (*ProviderEndpoint, error) {
	nodes, err := peq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{providerendpoint.Label}
	default:
		return nil, &NotSingularError{providerendpoint.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (peq *ProviderEndpointQuery) OnlyX(ctx context.Context) *ProviderEndpoint {
	node, err := peq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProviderEndpoint ID in the query.
// Returns a *NotSingularError when more than one ProviderEndpoint ID is found.
// Returns a *NotFoundError when no entities are found.
func (peq *ProviderEndpointQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = peq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{providerendpoint.Label}
	default:
		err = &NotSingularError{providerendpoint.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (peq *ProviderEndpointQuery) OnlyIDX(ctx context.Context) int {
	id, err := peq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProviderEndpoints.
func (peq *ProviderEndpointQuery) All(ctx context.Context) ([]*ProviderEndpoint, error) {
	if err := peq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return peq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (peq *ProviderEndpointQuery) AllX(ctx context.Context) []*ProviderEndpoint {
	nodes, err := peq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProviderEndpoint IDs.
func (peq *ProviderEndpointQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := peq.Select(providerendpoint.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (peq *ProviderEndpointQuery) IDsX(ctx context.Context) []int {
	ids, err := peq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (peq *ProviderEndpointQuery) Count(ctx context.Context) (int, error) {
	if err := peq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return peq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (peq *ProviderEndpointQuery) CountX(ctx context.Context) int {
	count, err := peq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (peq *ProviderEndpointQuery) Exist(ctx context.Context) (bool, error) {
	if err := peq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return peq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (peq *ProviderEndpointQuery) ExistX(ctx context.Context) bool {
	exist, err := peq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProviderEndpointQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (peq *ProviderEndpointQuery) Clone() *ProviderEndpointQuery {
	if peq == nil {
		return nil
	}
	return &ProviderEndpointQuery{
		config:           peq.config,
		limit:            peq.limit,
		offset:           peq.offset,
		order:            append([]OrderFunc{}, peq.order...),
		predicates:       append([]predicate.ProviderEndpoint{}, peq.predicates...),
		withRequiredData: peq.withRequiredData.Clone(),
		withProvidedData: peq.withProvidedData.Clone(),
		withProvider:     peq.withProvider.Clone(),
		// clone intermediate query.
		sql:    peq.sql.Clone(),
		path:   peq.path,
		unique: peq.unique,
	}
}

// WithRequiredData tells the query-builder to eager-load the nodes that are connected to
// the "required_data" edge. The optional arguments are used to configure the query builder of the edge.
func (peq *ProviderEndpointQuery) WithRequiredData(opts ...func(*EndpointDataQuery)) *ProviderEndpointQuery {
	query := &EndpointDataQuery{config: peq.config}
	for _, opt := range opts {
		opt(query)
	}
	peq.withRequiredData = query
	return peq
}

// WithProvidedData tells the query-builder to eager-load the nodes that are connected to
// the "provided_data" edge. The optional arguments are used to configure the query builder of the edge.
func (peq *ProviderEndpointQuery) WithProvidedData(opts ...func(*EndpointDataQuery)) *ProviderEndpointQuery {
	query := &EndpointDataQuery{config: peq.config}
	for _, opt := range opts {
		opt(query)
	}
	peq.withProvidedData = query
	return peq
}

// WithProvider tells the query-builder to eager-load the nodes that are connected to
// the "provider" edge. The optional arguments are used to configure the query builder of the edge.
func (peq *ProviderEndpointQuery) WithProvider(opts ...func(*ProviderRegisterDataQuery)) *ProviderEndpointQuery {
	query := &ProviderRegisterDataQuery{config: peq.config}
	for _, opt := range opts {
		opt(query)
	}
	peq.withProvider = query
	return peq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProviderEndpoint.Query().
//		GroupBy(providerendpoint.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (peq *ProviderEndpointQuery) GroupBy(field string, fields ...string) *ProviderEndpointGroupBy {
	grbuild := &ProviderEndpointGroupBy{config: peq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := peq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return peq.sqlQuery(ctx), nil
	}
	grbuild.label = providerendpoint.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ProviderEndpoint.Query().
//		Select(providerendpoint.FieldName).
//		Scan(ctx, &v)
func (peq *ProviderEndpointQuery) Select(fields ...string) *ProviderEndpointSelect {
	peq.fields = append(peq.fields, fields...)
	selbuild := &ProviderEndpointSelect{ProviderEndpointQuery: peq}
	selbuild.label = providerendpoint.Label
	selbuild.flds, selbuild.scan = &peq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a ProviderEndpointSelect configured with the given aggregations.
func (peq *ProviderEndpointQuery) Aggregate(fns ...AggregateFunc) *ProviderEndpointSelect {
	return peq.Select().Aggregate(fns...)
}

func (peq *ProviderEndpointQuery) prepareQuery(ctx context.Context) error {
	for _, f := range peq.fields {
		if !providerendpoint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if peq.path != nil {
		prev, err := peq.path(ctx)
		if err != nil {
			return err
		}
		peq.sql = prev
	}
	return nil
}

func (peq *ProviderEndpointQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProviderEndpoint, error) {
	var (
		nodes       = []*ProviderEndpoint{}
		withFKs     = peq.withFKs
		_spec       = peq.querySpec()
		loadedTypes = [3]bool{
			peq.withRequiredData != nil,
			peq.withProvidedData != nil,
			peq.withProvider != nil,
		}
	)
	if peq.withProvider != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, providerendpoint.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProviderEndpoint).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProviderEndpoint{config: peq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, peq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := peq.withRequiredData; query != nil {
		if err := peq.loadRequiredData(ctx, query, nodes,
			func(n *ProviderEndpoint) { n.Edges.RequiredData = []*EndpointData{} },
			func(n *ProviderEndpoint, e *EndpointData) { n.Edges.RequiredData = append(n.Edges.RequiredData, e) }); err != nil {
			return nil, err
		}
	}
	if query := peq.withProvidedData; query != nil {
		if err := peq.loadProvidedData(ctx, query, nodes,
			func(n *ProviderEndpoint) { n.Edges.ProvidedData = []*EndpointData{} },
			func(n *ProviderEndpoint, e *EndpointData) { n.Edges.ProvidedData = append(n.Edges.ProvidedData, e) }); err != nil {
			return nil, err
		}
	}
	if query := peq.withProvider; query != nil {
		if err := peq.loadProvider(ctx, query, nodes, nil,
			func(n *ProviderEndpoint, e *ProviderRegisterData) { n.Edges.Provider = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (peq *ProviderEndpointQuery) loadRequiredData(ctx context.Context, query *EndpointDataQuery, nodes []*ProviderEndpoint, init func(*ProviderEndpoint), assign func(*ProviderEndpoint, *EndpointData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProviderEndpoint)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EndpointData(func(s *sql.Selector) {
		s.Where(sql.InValues(providerendpoint.RequiredDataColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provider_endpoint_required_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "provider_endpoint_required_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provider_endpoint_required_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (peq *ProviderEndpointQuery) loadProvidedData(ctx context.Context, query *EndpointDataQuery, nodes []*ProviderEndpoint, init func(*ProviderEndpoint), assign func(*ProviderEndpoint, *EndpointData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProviderEndpoint)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EndpointData(func(s *sql.Selector) {
		s.Where(sql.InValues(providerendpoint.ProvidedDataColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provider_endpoint_provided_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "provider_endpoint_provided_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provider_endpoint_provided_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (peq *ProviderEndpointQuery) loadProvider(ctx context.Context, query *ProviderRegisterDataQuery, nodes []*ProviderEndpoint, init func(*ProviderEndpoint), assign func(*ProviderEndpoint, *ProviderRegisterData)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProviderEndpoint)
	for i := range nodes {
		if nodes[i].provider_register_data_endpoints == nil {
			continue
		}
		fk := *nodes[i].provider_register_data_endpoints
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(providerregisterdata.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provider_register_data_endpoints" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (peq *ProviderEndpointQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := peq.querySpec()
	_spec.Node.Columns = peq.fields
	if len(peq.fields) > 0 {
		_spec.Unique = peq.unique != nil && *peq.unique
	}
	return sqlgraph.CountNodes(ctx, peq.driver, _spec)
}

func (peq *ProviderEndpointQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := peq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (peq *ProviderEndpointQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   providerendpoint.Table,
			Columns: providerendpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: providerendpoint.FieldID,
			},
		},
		From:   peq.sql,
		Unique: true,
	}
	if unique := peq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := peq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerendpoint.FieldID)
		for i := range fields {
			if fields[i] != providerendpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := peq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := peq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := peq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := peq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (peq *ProviderEndpointQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(peq.driver.Dialect())
	t1 := builder.Table(providerendpoint.Table)
	columns := peq.fields
	if len(columns) == 0 {
		columns = providerendpoint.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if peq.sql != nil {
		selector = peq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if peq.unique != nil && *peq.unique {
		selector.Distinct()
	}
	for _, p := range peq.predicates {
		p(selector)
	}
	for _, p := range peq.order {
		p(selector)
	}
	if offset := peq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := peq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProviderEndpointGroupBy is the group-by builder for ProviderEndpoint entities.
type ProviderEndpointGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pegb *ProviderEndpointGroupBy) Aggregate(fns ...AggregateFunc) *ProviderEndpointGroupBy {
	pegb.fns = append(pegb.fns, fns...)
	return pegb
}

// Scan applies the group-by query and scans the result into the given value.
func (pegb *ProviderEndpointGroupBy) Scan(ctx context.Context, v any) error {
	query, err := pegb.path(ctx)
	if err != nil {
		return err
	}
	pegb.sql = query
	return pegb.sqlScan(ctx, v)
}

func (pegb *ProviderEndpointGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range pegb.fields {
		if !providerendpoint.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pegb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pegb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pegb *ProviderEndpointGroupBy) sqlQuery() *sql.Selector {
	selector := pegb.sql.Select()
	aggregation := make([]string, 0, len(pegb.fns))
	for _, fn := range pegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pegb.fields)+len(pegb.fns))
		for _, f := range pegb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pegb.fields...)...)
}

// ProviderEndpointSelect is the builder for selecting fields of ProviderEndpoint entities.
type ProviderEndpointSelect struct {
	*ProviderEndpointQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pes *ProviderEndpointSelect) Aggregate(fns ...AggregateFunc) *ProviderEndpointSelect {
	pes.fns = append(pes.fns, fns...)
	return pes
}

// Scan applies the selector query and scans the result into the given value.
func (pes *ProviderEndpointSelect) Scan(ctx context.Context, v any) error {
	if err := pes.prepareQuery(ctx); err != nil {
		return err
	}
	pes.sql = pes.ProviderEndpointQuery.sqlQuery(ctx)
	return pes.sqlScan(ctx, v)
}

func (pes *ProviderEndpointSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(pes.fns))
	for _, fn := range pes.fns {
		aggregation = append(aggregation, fn(pes.sql))
	}
	switch n := len(*pes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		pes.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		pes.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := pes.sql.Query()
	if err := pes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
