// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"servicediscoverer/ent/predicate"
	"servicediscoverer/ent/providerendpoint"
	"servicediscoverer/ent/providerregisterdata"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProviderRegisterDataQuery is the builder for querying ProviderRegisterData entities.
type ProviderRegisterDataQuery struct {
	config
	limit         *int
	offset        *int
	unique        *bool
	order         []OrderFunc
	fields        []string
	predicates    []predicate.ProviderRegisterData
	withEndpoints *ProviderEndpointQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProviderRegisterDataQuery builder.
func (prdq *ProviderRegisterDataQuery) Where(ps ...predicate.ProviderRegisterData) *ProviderRegisterDataQuery {
	prdq.predicates = append(prdq.predicates, ps...)
	return prdq
}

// Limit adds a limit step to the query.
func (prdq *ProviderRegisterDataQuery) Limit(limit int) *ProviderRegisterDataQuery {
	prdq.limit = &limit
	return prdq
}

// Offset adds an offset step to the query.
func (prdq *ProviderRegisterDataQuery) Offset(offset int) *ProviderRegisterDataQuery {
	prdq.offset = &offset
	return prdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (prdq *ProviderRegisterDataQuery) Unique(unique bool) *ProviderRegisterDataQuery {
	prdq.unique = &unique
	return prdq
}

// Order adds an order step to the query.
func (prdq *ProviderRegisterDataQuery) Order(o ...OrderFunc) *ProviderRegisterDataQuery {
	prdq.order = append(prdq.order, o...)
	return prdq
}

// QueryEndpoints chains the current query on the "endpoints" edge.
func (prdq *ProviderRegisterDataQuery) QueryEndpoints() *ProviderEndpointQuery {
	query := &ProviderEndpointQuery{config: prdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(providerregisterdata.Table, providerregisterdata.FieldID, selector),
			sqlgraph.To(providerendpoint.Table, providerendpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, providerregisterdata.EndpointsTable, providerregisterdata.EndpointsColumn),
		)
		fromU = sqlgraph.SetNeighbors(prdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProviderRegisterData entity from the query.
// Returns a *NotFoundError when no ProviderRegisterData was found.
func (prdq *ProviderRegisterDataQuery) First(ctx context.Context) (*ProviderRegisterData, error) {
	nodes, err := prdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{providerregisterdata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (prdq *ProviderRegisterDataQuery) FirstX(ctx context.Context) *ProviderRegisterData {
	node, err := prdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProviderRegisterData ID from the query.
// Returns a *NotFoundError when no ProviderRegisterData ID was found.
func (prdq *ProviderRegisterDataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = prdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{providerregisterdata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (prdq *ProviderRegisterDataQuery) FirstIDX(ctx context.Context) int {
	id, err := prdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProviderRegisterData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProviderRegisterData entity is found.
// Returns a *NotFoundError when no ProviderRegisterData entities are found.
func (prdq *ProviderRegisterDataQuery) Only(ctx context.Context) (*ProviderRegisterData, error) {
	nodes, err := prdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{providerregisterdata.Label}
	default:
		return nil, &NotSingularError{providerregisterdata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (prdq *ProviderRegisterDataQuery) OnlyX(ctx context.Context) *ProviderRegisterData {
	node, err := prdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProviderRegisterData ID in the query.
// Returns a *NotSingularError when more than one ProviderRegisterData ID is found.
// Returns a *NotFoundError when no entities are found.
func (prdq *ProviderRegisterDataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = prdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{providerregisterdata.Label}
	default:
		err = &NotSingularError{providerregisterdata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (prdq *ProviderRegisterDataQuery) OnlyIDX(ctx context.Context) int {
	id, err := prdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProviderRegisterDataSlice.
func (prdq *ProviderRegisterDataQuery) All(ctx context.Context) ([]*ProviderRegisterData, error) {
	if err := prdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return prdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (prdq *ProviderRegisterDataQuery) AllX(ctx context.Context) []*ProviderRegisterData {
	nodes, err := prdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProviderRegisterData IDs.
func (prdq *ProviderRegisterDataQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := prdq.Select(providerregisterdata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (prdq *ProviderRegisterDataQuery) IDsX(ctx context.Context) []int {
	ids, err := prdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (prdq *ProviderRegisterDataQuery) Count(ctx context.Context) (int, error) {
	if err := prdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return prdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (prdq *ProviderRegisterDataQuery) CountX(ctx context.Context) int {
	count, err := prdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (prdq *ProviderRegisterDataQuery) Exist(ctx context.Context) (bool, error) {
	if err := prdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return prdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (prdq *ProviderRegisterDataQuery) ExistX(ctx context.Context) bool {
	exist, err := prdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProviderRegisterDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (prdq *ProviderRegisterDataQuery) Clone() *ProviderRegisterDataQuery {
	if prdq == nil {
		return nil
	}
	return &ProviderRegisterDataQuery{
		config:        prdq.config,
		limit:         prdq.limit,
		offset:        prdq.offset,
		order:         append([]OrderFunc{}, prdq.order...),
		predicates:    append([]predicate.ProviderRegisterData{}, prdq.predicates...),
		withEndpoints: prdq.withEndpoints.Clone(),
		// clone intermediate query.
		sql:    prdq.sql.Clone(),
		path:   prdq.path,
		unique: prdq.unique,
	}
}

// WithEndpoints tells the query-builder to eager-load the nodes that are connected to
// the "endpoints" edge. The optional arguments are used to configure the query builder of the edge.
func (prdq *ProviderRegisterDataQuery) WithEndpoints(opts ...func(*ProviderEndpointQuery)) *ProviderRegisterDataQuery {
	query := &ProviderEndpointQuery{config: prdq.config}
	for _, opt := range opts {
		opt(query)
	}
	prdq.withEndpoints = query
	return prdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProviderRegisterData.Query().
//		GroupBy(providerregisterdata.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (prdq *ProviderRegisterDataQuery) GroupBy(field string, fields ...string) *ProviderRegisterDataGroupBy {
	grbuild := &ProviderRegisterDataGroupBy{config: prdq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := prdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return prdq.sqlQuery(ctx), nil
	}
	grbuild.label = providerregisterdata.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ProviderRegisterData.Query().
//		Select(providerregisterdata.FieldName).
//		Scan(ctx, &v)
func (prdq *ProviderRegisterDataQuery) Select(fields ...string) *ProviderRegisterDataSelect {
	prdq.fields = append(prdq.fields, fields...)
	selbuild := &ProviderRegisterDataSelect{ProviderRegisterDataQuery: prdq}
	selbuild.label = providerregisterdata.Label
	selbuild.flds, selbuild.scan = &prdq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a ProviderRegisterDataSelect configured with the given aggregations.
func (prdq *ProviderRegisterDataQuery) Aggregate(fns ...AggregateFunc) *ProviderRegisterDataSelect {
	return prdq.Select().Aggregate(fns...)
}

func (prdq *ProviderRegisterDataQuery) prepareQuery(ctx context.Context) error {
	for _, f := range prdq.fields {
		if !providerregisterdata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if prdq.path != nil {
		prev, err := prdq.path(ctx)
		if err != nil {
			return err
		}
		prdq.sql = prev
	}
	return nil
}

func (prdq *ProviderRegisterDataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProviderRegisterData, error) {
	var (
		nodes       = []*ProviderRegisterData{}
		_spec       = prdq.querySpec()
		loadedTypes = [1]bool{
			prdq.withEndpoints != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProviderRegisterData).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProviderRegisterData{config: prdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, prdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := prdq.withEndpoints; query != nil {
		if err := prdq.loadEndpoints(ctx, query, nodes,
			func(n *ProviderRegisterData) { n.Edges.Endpoints = []*ProviderEndpoint{} },
			func(n *ProviderRegisterData, e *ProviderEndpoint) { n.Edges.Endpoints = append(n.Edges.Endpoints, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (prdq *ProviderRegisterDataQuery) loadEndpoints(ctx context.Context, query *ProviderEndpointQuery, nodes []*ProviderRegisterData, init func(*ProviderRegisterData), assign func(*ProviderRegisterData, *ProviderEndpoint)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProviderRegisterData)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProviderEndpoint(func(s *sql.Selector) {
		s.Where(sql.InValues(providerregisterdata.EndpointsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.provider_register_data_endpoints
		if fk == nil {
			return fmt.Errorf(`foreign-key "provider_register_data_endpoints" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "provider_register_data_endpoints" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (prdq *ProviderRegisterDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := prdq.querySpec()
	_spec.Node.Columns = prdq.fields
	if len(prdq.fields) > 0 {
		_spec.Unique = prdq.unique != nil && *prdq.unique
	}
	return sqlgraph.CountNodes(ctx, prdq.driver, _spec)
}

func (prdq *ProviderRegisterDataQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := prdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (prdq *ProviderRegisterDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   providerregisterdata.Table,
			Columns: providerregisterdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: providerregisterdata.FieldID,
			},
		},
		From:   prdq.sql,
		Unique: true,
	}
	if unique := prdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := prdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerregisterdata.FieldID)
		for i := range fields {
			if fields[i] != providerregisterdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := prdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := prdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := prdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := prdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (prdq *ProviderRegisterDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(prdq.driver.Dialect())
	t1 := builder.Table(providerregisterdata.Table)
	columns := prdq.fields
	if len(columns) == 0 {
		columns = providerregisterdata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if prdq.sql != nil {
		selector = prdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if prdq.unique != nil && *prdq.unique {
		selector.Distinct()
	}
	for _, p := range prdq.predicates {
		p(selector)
	}
	for _, p := range prdq.order {
		p(selector)
	}
	if offset := prdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := prdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProviderRegisterDataGroupBy is the group-by builder for ProviderRegisterData entities.
type ProviderRegisterDataGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (prdgb *ProviderRegisterDataGroupBy) Aggregate(fns ...AggregateFunc) *ProviderRegisterDataGroupBy {
	prdgb.fns = append(prdgb.fns, fns...)
	return prdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (prdgb *ProviderRegisterDataGroupBy) Scan(ctx context.Context, v any) error {
	query, err := prdgb.path(ctx)
	if err != nil {
		return err
	}
	prdgb.sql = query
	return prdgb.sqlScan(ctx, v)
}

func (prdgb *ProviderRegisterDataGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range prdgb.fields {
		if !providerregisterdata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := prdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (prdgb *ProviderRegisterDataGroupBy) sqlQuery() *sql.Selector {
	selector := prdgb.sql.Select()
	aggregation := make([]string, 0, len(prdgb.fns))
	for _, fn := range prdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(prdgb.fields)+len(prdgb.fns))
		for _, f := range prdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(prdgb.fields...)...)
}

// ProviderRegisterDataSelect is the builder for selecting fields of ProviderRegisterData entities.
type ProviderRegisterDataSelect struct {
	*ProviderRegisterDataQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (prds *ProviderRegisterDataSelect) Aggregate(fns ...AggregateFunc) *ProviderRegisterDataSelect {
	prds.fns = append(prds.fns, fns...)
	return prds
}

// Scan applies the selector query and scans the result into the given value.
func (prds *ProviderRegisterDataSelect) Scan(ctx context.Context, v any) error {
	if err := prds.prepareQuery(ctx); err != nil {
		return err
	}
	prds.sql = prds.ProviderRegisterDataQuery.sqlQuery(ctx)
	return prds.sqlScan(ctx, v)
}

func (prds *ProviderRegisterDataSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(prds.fns))
	for _, fn := range prds.fns {
		aggregation = append(aggregation, fn(prds.sql))
	}
	switch n := len(*prds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		prds.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		prds.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := prds.sql.Query()
	if err := prds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
