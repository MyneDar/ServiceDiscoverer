// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"servicediscoverer/ent/endpointdata"
	"servicediscoverer/ent/predicate"
	"servicediscoverer/ent/providerendpoint"
	"servicediscoverer/ent/providerregisterdata"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProviderEndpointUpdate is the builder for updating ProviderEndpoint entities.
type ProviderEndpointUpdate struct {
	config
	hooks    []Hook
	mutation *ProviderEndpointMutation
}

// Where appends a list predicates to the ProviderEndpointUpdate builder.
func (peu *ProviderEndpointUpdate) Where(ps ...predicate.ProviderEndpoint) *ProviderEndpointUpdate {
	peu.mutation.Where(ps...)
	return peu
}

// SetName sets the "name" field.
func (peu *ProviderEndpointUpdate) SetName(s string) *ProviderEndpointUpdate {
	peu.mutation.SetName(s)
	return peu
}

// SetPath sets the "path" field.
func (peu *ProviderEndpointUpdate) SetPath(s string) *ProviderEndpointUpdate {
	peu.mutation.SetPath(s)
	return peu
}

// SetType sets the "type" field.
func (peu *ProviderEndpointUpdate) SetType(s string) *ProviderEndpointUpdate {
	peu.mutation.SetType(s)
	return peu
}

// SetDescription sets the "description" field.
func (peu *ProviderEndpointUpdate) SetDescription(s string) *ProviderEndpointUpdate {
	peu.mutation.SetDescription(s)
	return peu
}

// AddRequiredDatumIDs adds the "required_data" edge to the EndpointData entity by IDs.
func (peu *ProviderEndpointUpdate) AddRequiredDatumIDs(ids ...int) *ProviderEndpointUpdate {
	peu.mutation.AddRequiredDatumIDs(ids...)
	return peu
}

// AddRequiredData adds the "required_data" edges to the EndpointData entity.
func (peu *ProviderEndpointUpdate) AddRequiredData(e ...*EndpointData) *ProviderEndpointUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return peu.AddRequiredDatumIDs(ids...)
}

// AddProvidedDatumIDs adds the "provided_data" edge to the EndpointData entity by IDs.
func (peu *ProviderEndpointUpdate) AddProvidedDatumIDs(ids ...int) *ProviderEndpointUpdate {
	peu.mutation.AddProvidedDatumIDs(ids...)
	return peu
}

// AddProvidedData adds the "provided_data" edges to the EndpointData entity.
func (peu *ProviderEndpointUpdate) AddProvidedData(e ...*EndpointData) *ProviderEndpointUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return peu.AddProvidedDatumIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderRegisterData entity by ID.
func (peu *ProviderEndpointUpdate) SetProviderID(id int) *ProviderEndpointUpdate {
	peu.mutation.SetProviderID(id)
	return peu
}

// SetNillableProviderID sets the "provider" edge to the ProviderRegisterData entity by ID if the given value is not nil.
func (peu *ProviderEndpointUpdate) SetNillableProviderID(id *int) *ProviderEndpointUpdate {
	if id != nil {
		peu = peu.SetProviderID(*id)
	}
	return peu
}

// SetProvider sets the "provider" edge to the ProviderRegisterData entity.
func (peu *ProviderEndpointUpdate) SetProvider(p *ProviderRegisterData) *ProviderEndpointUpdate {
	return peu.SetProviderID(p.ID)
}

// Mutation returns the ProviderEndpointMutation object of the builder.
func (peu *ProviderEndpointUpdate) Mutation() *ProviderEndpointMutation {
	return peu.mutation
}

// ClearRequiredData clears all "required_data" edges to the EndpointData entity.
func (peu *ProviderEndpointUpdate) ClearRequiredData() *ProviderEndpointUpdate {
	peu.mutation.ClearRequiredData()
	return peu
}

// RemoveRequiredDatumIDs removes the "required_data" edge to EndpointData entities by IDs.
func (peu *ProviderEndpointUpdate) RemoveRequiredDatumIDs(ids ...int) *ProviderEndpointUpdate {
	peu.mutation.RemoveRequiredDatumIDs(ids...)
	return peu
}

// RemoveRequiredData removes "required_data" edges to EndpointData entities.
func (peu *ProviderEndpointUpdate) RemoveRequiredData(e ...*EndpointData) *ProviderEndpointUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return peu.RemoveRequiredDatumIDs(ids...)
}

// ClearProvidedData clears all "provided_data" edges to the EndpointData entity.
func (peu *ProviderEndpointUpdate) ClearProvidedData() *ProviderEndpointUpdate {
	peu.mutation.ClearProvidedData()
	return peu
}

// RemoveProvidedDatumIDs removes the "provided_data" edge to EndpointData entities by IDs.
func (peu *ProviderEndpointUpdate) RemoveProvidedDatumIDs(ids ...int) *ProviderEndpointUpdate {
	peu.mutation.RemoveProvidedDatumIDs(ids...)
	return peu
}

// RemoveProvidedData removes "provided_data" edges to EndpointData entities.
func (peu *ProviderEndpointUpdate) RemoveProvidedData(e ...*EndpointData) *ProviderEndpointUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return peu.RemoveProvidedDatumIDs(ids...)
}

// ClearProvider clears the "provider" edge to the ProviderRegisterData entity.
func (peu *ProviderEndpointUpdate) ClearProvider() *ProviderEndpointUpdate {
	peu.mutation.ClearProvider()
	return peu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (peu *ProviderEndpointUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProviderEndpointMutation](ctx, peu.sqlSave, peu.mutation, peu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peu *ProviderEndpointUpdate) SaveX(ctx context.Context) int {
	affected, err := peu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (peu *ProviderEndpointUpdate) Exec(ctx context.Context) error {
	_, err := peu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peu *ProviderEndpointUpdate) ExecX(ctx context.Context) {
	if err := peu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peu *ProviderEndpointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   providerendpoint.Table,
			Columns: providerendpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: providerendpoint.FieldID,
			},
		},
	}
	if ps := peu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peu.mutation.Name(); ok {
		_spec.SetField(providerendpoint.FieldName, field.TypeString, value)
	}
	if value, ok := peu.mutation.Path(); ok {
		_spec.SetField(providerendpoint.FieldPath, field.TypeString, value)
	}
	if value, ok := peu.mutation.GetType(); ok {
		_spec.SetField(providerendpoint.FieldType, field.TypeString, value)
	}
	if value, ok := peu.mutation.Description(); ok {
		_spec.SetField(providerendpoint.FieldDescription, field.TypeString, value)
	}
	if peu.mutation.RequiredDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.RequiredDataTable,
			Columns: []string{providerendpoint.RequiredDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.RemovedRequiredDataIDs(); len(nodes) > 0 && !peu.mutation.RequiredDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.RequiredDataTable,
			Columns: []string{providerendpoint.RequiredDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.RequiredDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.RequiredDataTable,
			Columns: []string{providerendpoint.RequiredDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peu.mutation.ProvidedDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.ProvidedDataTable,
			Columns: []string{providerendpoint.ProvidedDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.RemovedProvidedDataIDs(); len(nodes) > 0 && !peu.mutation.ProvidedDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.ProvidedDataTable,
			Columns: []string{providerendpoint.ProvidedDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.ProvidedDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.ProvidedDataTable,
			Columns: []string{providerendpoint.ProvidedDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peu.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerendpoint.ProviderTable,
			Columns: []string{providerendpoint.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerregisterdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerendpoint.ProviderTable,
			Columns: []string{providerendpoint.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerregisterdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, peu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerendpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	peu.mutation.done = true
	return n, nil
}

// ProviderEndpointUpdateOne is the builder for updating a single ProviderEndpoint entity.
type ProviderEndpointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProviderEndpointMutation
}

// SetName sets the "name" field.
func (peuo *ProviderEndpointUpdateOne) SetName(s string) *ProviderEndpointUpdateOne {
	peuo.mutation.SetName(s)
	return peuo
}

// SetPath sets the "path" field.
func (peuo *ProviderEndpointUpdateOne) SetPath(s string) *ProviderEndpointUpdateOne {
	peuo.mutation.SetPath(s)
	return peuo
}

// SetType sets the "type" field.
func (peuo *ProviderEndpointUpdateOne) SetType(s string) *ProviderEndpointUpdateOne {
	peuo.mutation.SetType(s)
	return peuo
}

// SetDescription sets the "description" field.
func (peuo *ProviderEndpointUpdateOne) SetDescription(s string) *ProviderEndpointUpdateOne {
	peuo.mutation.SetDescription(s)
	return peuo
}

// AddRequiredDatumIDs adds the "required_data" edge to the EndpointData entity by IDs.
func (peuo *ProviderEndpointUpdateOne) AddRequiredDatumIDs(ids ...int) *ProviderEndpointUpdateOne {
	peuo.mutation.AddRequiredDatumIDs(ids...)
	return peuo
}

// AddRequiredData adds the "required_data" edges to the EndpointData entity.
func (peuo *ProviderEndpointUpdateOne) AddRequiredData(e ...*EndpointData) *ProviderEndpointUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return peuo.AddRequiredDatumIDs(ids...)
}

// AddProvidedDatumIDs adds the "provided_data" edge to the EndpointData entity by IDs.
func (peuo *ProviderEndpointUpdateOne) AddProvidedDatumIDs(ids ...int) *ProviderEndpointUpdateOne {
	peuo.mutation.AddProvidedDatumIDs(ids...)
	return peuo
}

// AddProvidedData adds the "provided_data" edges to the EndpointData entity.
func (peuo *ProviderEndpointUpdateOne) AddProvidedData(e ...*EndpointData) *ProviderEndpointUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return peuo.AddProvidedDatumIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderRegisterData entity by ID.
func (peuo *ProviderEndpointUpdateOne) SetProviderID(id int) *ProviderEndpointUpdateOne {
	peuo.mutation.SetProviderID(id)
	return peuo
}

// SetNillableProviderID sets the "provider" edge to the ProviderRegisterData entity by ID if the given value is not nil.
func (peuo *ProviderEndpointUpdateOne) SetNillableProviderID(id *int) *ProviderEndpointUpdateOne {
	if id != nil {
		peuo = peuo.SetProviderID(*id)
	}
	return peuo
}

// SetProvider sets the "provider" edge to the ProviderRegisterData entity.
func (peuo *ProviderEndpointUpdateOne) SetProvider(p *ProviderRegisterData) *ProviderEndpointUpdateOne {
	return peuo.SetProviderID(p.ID)
}

// Mutation returns the ProviderEndpointMutation object of the builder.
func (peuo *ProviderEndpointUpdateOne) Mutation() *ProviderEndpointMutation {
	return peuo.mutation
}

// ClearRequiredData clears all "required_data" edges to the EndpointData entity.
func (peuo *ProviderEndpointUpdateOne) ClearRequiredData() *ProviderEndpointUpdateOne {
	peuo.mutation.ClearRequiredData()
	return peuo
}

// RemoveRequiredDatumIDs removes the "required_data" edge to EndpointData entities by IDs.
func (peuo *ProviderEndpointUpdateOne) RemoveRequiredDatumIDs(ids ...int) *ProviderEndpointUpdateOne {
	peuo.mutation.RemoveRequiredDatumIDs(ids...)
	return peuo
}

// RemoveRequiredData removes "required_data" edges to EndpointData entities.
func (peuo *ProviderEndpointUpdateOne) RemoveRequiredData(e ...*EndpointData) *ProviderEndpointUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return peuo.RemoveRequiredDatumIDs(ids...)
}

// ClearProvidedData clears all "provided_data" edges to the EndpointData entity.
func (peuo *ProviderEndpointUpdateOne) ClearProvidedData() *ProviderEndpointUpdateOne {
	peuo.mutation.ClearProvidedData()
	return peuo
}

// RemoveProvidedDatumIDs removes the "provided_data" edge to EndpointData entities by IDs.
func (peuo *ProviderEndpointUpdateOne) RemoveProvidedDatumIDs(ids ...int) *ProviderEndpointUpdateOne {
	peuo.mutation.RemoveProvidedDatumIDs(ids...)
	return peuo
}

// RemoveProvidedData removes "provided_data" edges to EndpointData entities.
func (peuo *ProviderEndpointUpdateOne) RemoveProvidedData(e ...*EndpointData) *ProviderEndpointUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return peuo.RemoveProvidedDatumIDs(ids...)
}

// ClearProvider clears the "provider" edge to the ProviderRegisterData entity.
func (peuo *ProviderEndpointUpdateOne) ClearProvider() *ProviderEndpointUpdateOne {
	peuo.mutation.ClearProvider()
	return peuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peuo *ProviderEndpointUpdateOne) Select(field string, fields ...string) *ProviderEndpointUpdateOne {
	peuo.fields = append([]string{field}, fields...)
	return peuo
}

// Save executes the query and returns the updated ProviderEndpoint entity.
func (peuo *ProviderEndpointUpdateOne) Save(ctx context.Context) (*ProviderEndpoint, error) {
	return withHooks[*ProviderEndpoint, ProviderEndpointMutation](ctx, peuo.sqlSave, peuo.mutation, peuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peuo *ProviderEndpointUpdateOne) SaveX(ctx context.Context) *ProviderEndpoint {
	node, err := peuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peuo *ProviderEndpointUpdateOne) Exec(ctx context.Context) error {
	_, err := peuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peuo *ProviderEndpointUpdateOne) ExecX(ctx context.Context) {
	if err := peuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peuo *ProviderEndpointUpdateOne) sqlSave(ctx context.Context) (_node *ProviderEndpoint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   providerendpoint.Table,
			Columns: providerendpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: providerendpoint.FieldID,
			},
		},
	}
	id, ok := peuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderEndpoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := peuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerendpoint.FieldID)
		for _, f := range fields {
			if !providerendpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providerendpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := peuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peuo.mutation.Name(); ok {
		_spec.SetField(providerendpoint.FieldName, field.TypeString, value)
	}
	if value, ok := peuo.mutation.Path(); ok {
		_spec.SetField(providerendpoint.FieldPath, field.TypeString, value)
	}
	if value, ok := peuo.mutation.GetType(); ok {
		_spec.SetField(providerendpoint.FieldType, field.TypeString, value)
	}
	if value, ok := peuo.mutation.Description(); ok {
		_spec.SetField(providerendpoint.FieldDescription, field.TypeString, value)
	}
	if peuo.mutation.RequiredDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.RequiredDataTable,
			Columns: []string{providerendpoint.RequiredDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.RemovedRequiredDataIDs(); len(nodes) > 0 && !peuo.mutation.RequiredDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.RequiredDataTable,
			Columns: []string{providerendpoint.RequiredDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.RequiredDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.RequiredDataTable,
			Columns: []string{providerendpoint.RequiredDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peuo.mutation.ProvidedDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.ProvidedDataTable,
			Columns: []string{providerendpoint.ProvidedDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.RemovedProvidedDataIDs(); len(nodes) > 0 && !peuo.mutation.ProvidedDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.ProvidedDataTable,
			Columns: []string{providerendpoint.ProvidedDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.ProvidedDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   providerendpoint.ProvidedDataTable,
			Columns: []string{providerendpoint.ProvidedDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: endpointdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peuo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerendpoint.ProviderTable,
			Columns: []string{providerendpoint.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerregisterdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerendpoint.ProviderTable,
			Columns: []string{providerendpoint.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: providerregisterdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProviderEndpoint{config: peuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, peuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerendpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	peuo.mutation.done = true
	return _node, nil
}
