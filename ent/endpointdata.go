// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"servicediscoverer/ent/endpointdata"
	"servicediscoverer/ent/providerendpoint"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// EndpointData is the model entity for the EndpointData schema.
type EndpointData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DataName holds the value of the "dataName" field.
	DataName string `json:"dataName,omitempty"`
	// Discription holds the value of the "discription" field.
	Discription string `json:"discription,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EndpointDataQuery when eager-loading is set.
	Edges                           EndpointDataEdges `json:"edges"`
	provider_endpoint_required_data *int
	provider_endpoint_provided_data *int
}

// EndpointDataEdges holds the relations/edges for other nodes in the graph.
type EndpointDataEdges struct {
	// EndpointRequired holds the value of the endpointRequired edge.
	EndpointRequired *ProviderEndpoint `json:"endpointRequired,omitempty"`
	// EndpointProvided holds the value of the endpointProvided edge.
	EndpointProvided *ProviderEndpoint `json:"endpointProvided,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EndpointRequiredOrErr returns the EndpointRequired value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EndpointDataEdges) EndpointRequiredOrErr() (*ProviderEndpoint, error) {
	if e.loadedTypes[0] {
		if e.EndpointRequired == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: providerendpoint.Label}
		}
		return e.EndpointRequired, nil
	}
	return nil, &NotLoadedError{edge: "endpointRequired"}
}

// EndpointProvidedOrErr returns the EndpointProvided value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EndpointDataEdges) EndpointProvidedOrErr() (*ProviderEndpoint, error) {
	if e.loadedTypes[1] {
		if e.EndpointProvided == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: providerendpoint.Label}
		}
		return e.EndpointProvided, nil
	}
	return nil, &NotLoadedError{edge: "endpointProvided"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EndpointData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case endpointdata.FieldID:
			values[i] = new(sql.NullInt64)
		case endpointdata.FieldDataName, endpointdata.FieldDiscription, endpointdata.FieldType:
			values[i] = new(sql.NullString)
		case endpointdata.ForeignKeys[0]: // provider_endpoint_required_data
			values[i] = new(sql.NullInt64)
		case endpointdata.ForeignKeys[1]: // provider_endpoint_provided_data
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EndpointData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EndpointData fields.
func (ed *EndpointData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case endpointdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ed.ID = int(value.Int64)
		case endpointdata.FieldDataName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dataName", values[i])
			} else if value.Valid {
				ed.DataName = value.String
			}
		case endpointdata.FieldDiscription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discription", values[i])
			} else if value.Valid {
				ed.Discription = value.String
			}
		case endpointdata.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ed.Type = value.String
			}
		case endpointdata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field provider_endpoint_required_data", value)
			} else if value.Valid {
				ed.provider_endpoint_required_data = new(int)
				*ed.provider_endpoint_required_data = int(value.Int64)
			}
		case endpointdata.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field provider_endpoint_provided_data", value)
			} else if value.Valid {
				ed.provider_endpoint_provided_data = new(int)
				*ed.provider_endpoint_provided_data = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEndpointRequired queries the "endpointRequired" edge of the EndpointData entity.
func (ed *EndpointData) QueryEndpointRequired() *ProviderEndpointQuery {
	return (&EndpointDataClient{config: ed.config}).QueryEndpointRequired(ed)
}

// QueryEndpointProvided queries the "endpointProvided" edge of the EndpointData entity.
func (ed *EndpointData) QueryEndpointProvided() *ProviderEndpointQuery {
	return (&EndpointDataClient{config: ed.config}).QueryEndpointProvided(ed)
}

// Update returns a builder for updating this EndpointData.
// Note that you need to call EndpointData.Unwrap() before calling this method if this EndpointData
// was returned from a transaction, and the transaction was committed or rolled back.
func (ed *EndpointData) Update() *EndpointDataUpdateOne {
	return (&EndpointDataClient{config: ed.config}).UpdateOne(ed)
}

// Unwrap unwraps the EndpointData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ed *EndpointData) Unwrap() *EndpointData {
	_tx, ok := ed.config.driver.(*txDriver)
	if !ok {
		panic("ent: EndpointData is not a transactional entity")
	}
	ed.config.driver = _tx.drv
	return ed
}

// String implements the fmt.Stringer.
func (ed *EndpointData) String() string {
	var builder strings.Builder
	builder.WriteString("EndpointData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ed.ID))
	builder.WriteString("dataName=")
	builder.WriteString(ed.DataName)
	builder.WriteString(", ")
	builder.WriteString("discription=")
	builder.WriteString(ed.Discription)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ed.Type)
	builder.WriteByte(')')
	return builder.String()
}

// EndpointDataSlice is a parsable slice of EndpointData.
type EndpointDataSlice []*EndpointData

func (ed EndpointDataSlice) config(cfg config) {
	for _i := range ed {
		ed[_i].config = cfg
	}
}
