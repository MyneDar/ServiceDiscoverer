// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"servicediscoverer/ent/endpointdata"
	"servicediscoverer/ent/predicate"
	"servicediscoverer/ent/providerendpoint"
	"servicediscoverer/ent/providerregisterdata"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEndpointData         = "EndpointData"
	TypeProviderEndpoint     = "ProviderEndpoint"
	TypeProviderRegisterData = "ProviderRegisterData"
)

// EndpointDataMutation represents an operation that mutates the EndpointData nodes in the graph.
type EndpointDataMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	dataName                *string
	discription             *string
	_type                   *string
	_path                   *string
	clearedFields           map[string]struct{}
	endpointRequired        *int
	clearedendpointRequired bool
	endpointProvided        *int
	clearedendpointProvided bool
	done                    bool
	oldValue                func(context.Context) (*EndpointData, error)
	predicates              []predicate.EndpointData
}

var _ ent.Mutation = (*EndpointDataMutation)(nil)

// endpointdataOption allows management of the mutation configuration using functional options.
type endpointdataOption func(*EndpointDataMutation)

// newEndpointDataMutation creates new mutation for the EndpointData entity.
func newEndpointDataMutation(c config, op Op, opts ...endpointdataOption) *EndpointDataMutation {
	m := &EndpointDataMutation{
		config:        c,
		op:            op,
		typ:           TypeEndpointData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEndpointDataID sets the ID field of the mutation.
func withEndpointDataID(id int) endpointdataOption {
	return func(m *EndpointDataMutation) {
		var (
			err   error
			once  sync.Once
			value *EndpointData
		)
		m.oldValue = func(ctx context.Context) (*EndpointData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EndpointData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEndpointData sets the old EndpointData of the mutation.
func withEndpointData(node *EndpointData) endpointdataOption {
	return func(m *EndpointDataMutation) {
		m.oldValue = func(context.Context) (*EndpointData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EndpointDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EndpointDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EndpointDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EndpointDataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EndpointData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDataName sets the "dataName" field.
func (m *EndpointDataMutation) SetDataName(s string) {
	m.dataName = &s
}

// DataName returns the value of the "dataName" field in the mutation.
func (m *EndpointDataMutation) DataName() (r string, exists bool) {
	v := m.dataName
	if v == nil {
		return
	}
	return *v, true
}

// OldDataName returns the old "dataName" field's value of the EndpointData entity.
// If the EndpointData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EndpointDataMutation) OldDataName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataName: %w", err)
	}
	return oldValue.DataName, nil
}

// ResetDataName resets all changes to the "dataName" field.
func (m *EndpointDataMutation) ResetDataName() {
	m.dataName = nil
}

// SetDiscription sets the "discription" field.
func (m *EndpointDataMutation) SetDiscription(s string) {
	m.discription = &s
}

// Discription returns the value of the "discription" field in the mutation.
func (m *EndpointDataMutation) Discription() (r string, exists bool) {
	v := m.discription
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscription returns the old "discription" field's value of the EndpointData entity.
// If the EndpointData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EndpointDataMutation) OldDiscription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscription: %w", err)
	}
	return oldValue.Discription, nil
}

// ResetDiscription resets all changes to the "discription" field.
func (m *EndpointDataMutation) ResetDiscription() {
	m.discription = nil
}

// SetType sets the "type" field.
func (m *EndpointDataMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *EndpointDataMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the EndpointData entity.
// If the EndpointData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EndpointDataMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *EndpointDataMutation) ResetType() {
	m._type = nil
}

// SetPath sets the "path" field.
func (m *EndpointDataMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *EndpointDataMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the EndpointData entity.
// If the EndpointData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EndpointDataMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *EndpointDataMutation) ResetPath() {
	m._path = nil
}

// SetEndpointRequiredID sets the "endpointRequired" edge to the ProviderEndpoint entity by id.
func (m *EndpointDataMutation) SetEndpointRequiredID(id int) {
	m.endpointRequired = &id
}

// ClearEndpointRequired clears the "endpointRequired" edge to the ProviderEndpoint entity.
func (m *EndpointDataMutation) ClearEndpointRequired() {
	m.clearedendpointRequired = true
}

// EndpointRequiredCleared reports if the "endpointRequired" edge to the ProviderEndpoint entity was cleared.
func (m *EndpointDataMutation) EndpointRequiredCleared() bool {
	return m.clearedendpointRequired
}

// EndpointRequiredID returns the "endpointRequired" edge ID in the mutation.
func (m *EndpointDataMutation) EndpointRequiredID() (id int, exists bool) {
	if m.endpointRequired != nil {
		return *m.endpointRequired, true
	}
	return
}

// EndpointRequiredIDs returns the "endpointRequired" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EndpointRequiredID instead. It exists only for internal usage by the builders.
func (m *EndpointDataMutation) EndpointRequiredIDs() (ids []int) {
	if id := m.endpointRequired; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEndpointRequired resets all changes to the "endpointRequired" edge.
func (m *EndpointDataMutation) ResetEndpointRequired() {
	m.endpointRequired = nil
	m.clearedendpointRequired = false
}

// SetEndpointProvidedID sets the "endpointProvided" edge to the ProviderEndpoint entity by id.
func (m *EndpointDataMutation) SetEndpointProvidedID(id int) {
	m.endpointProvided = &id
}

// ClearEndpointProvided clears the "endpointProvided" edge to the ProviderEndpoint entity.
func (m *EndpointDataMutation) ClearEndpointProvided() {
	m.clearedendpointProvided = true
}

// EndpointProvidedCleared reports if the "endpointProvided" edge to the ProviderEndpoint entity was cleared.
func (m *EndpointDataMutation) EndpointProvidedCleared() bool {
	return m.clearedendpointProvided
}

// EndpointProvidedID returns the "endpointProvided" edge ID in the mutation.
func (m *EndpointDataMutation) EndpointProvidedID() (id int, exists bool) {
	if m.endpointProvided != nil {
		return *m.endpointProvided, true
	}
	return
}

// EndpointProvidedIDs returns the "endpointProvided" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EndpointProvidedID instead. It exists only for internal usage by the builders.
func (m *EndpointDataMutation) EndpointProvidedIDs() (ids []int) {
	if id := m.endpointProvided; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEndpointProvided resets all changes to the "endpointProvided" edge.
func (m *EndpointDataMutation) ResetEndpointProvided() {
	m.endpointProvided = nil
	m.clearedendpointProvided = false
}

// Where appends a list predicates to the EndpointDataMutation builder.
func (m *EndpointDataMutation) Where(ps ...predicate.EndpointData) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EndpointDataMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EndpointData).
func (m *EndpointDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EndpointDataMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.dataName != nil {
		fields = append(fields, endpointdata.FieldDataName)
	}
	if m.discription != nil {
		fields = append(fields, endpointdata.FieldDiscription)
	}
	if m._type != nil {
		fields = append(fields, endpointdata.FieldType)
	}
	if m._path != nil {
		fields = append(fields, endpointdata.FieldPath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EndpointDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case endpointdata.FieldDataName:
		return m.DataName()
	case endpointdata.FieldDiscription:
		return m.Discription()
	case endpointdata.FieldType:
		return m.GetType()
	case endpointdata.FieldPath:
		return m.Path()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EndpointDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case endpointdata.FieldDataName:
		return m.OldDataName(ctx)
	case endpointdata.FieldDiscription:
		return m.OldDiscription(ctx)
	case endpointdata.FieldType:
		return m.OldType(ctx)
	case endpointdata.FieldPath:
		return m.OldPath(ctx)
	}
	return nil, fmt.Errorf("unknown EndpointData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EndpointDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case endpointdata.FieldDataName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataName(v)
		return nil
	case endpointdata.FieldDiscription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscription(v)
		return nil
	case endpointdata.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case endpointdata.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	}
	return fmt.Errorf("unknown EndpointData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EndpointDataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EndpointDataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EndpointDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EndpointData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EndpointDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EndpointDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EndpointDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EndpointData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EndpointDataMutation) ResetField(name string) error {
	switch name {
	case endpointdata.FieldDataName:
		m.ResetDataName()
		return nil
	case endpointdata.FieldDiscription:
		m.ResetDiscription()
		return nil
	case endpointdata.FieldType:
		m.ResetType()
		return nil
	case endpointdata.FieldPath:
		m.ResetPath()
		return nil
	}
	return fmt.Errorf("unknown EndpointData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EndpointDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.endpointRequired != nil {
		edges = append(edges, endpointdata.EdgeEndpointRequired)
	}
	if m.endpointProvided != nil {
		edges = append(edges, endpointdata.EdgeEndpointProvided)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EndpointDataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case endpointdata.EdgeEndpointRequired:
		if id := m.endpointRequired; id != nil {
			return []ent.Value{*id}
		}
	case endpointdata.EdgeEndpointProvided:
		if id := m.endpointProvided; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EndpointDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EndpointDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EndpointDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedendpointRequired {
		edges = append(edges, endpointdata.EdgeEndpointRequired)
	}
	if m.clearedendpointProvided {
		edges = append(edges, endpointdata.EdgeEndpointProvided)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EndpointDataMutation) EdgeCleared(name string) bool {
	switch name {
	case endpointdata.EdgeEndpointRequired:
		return m.clearedendpointRequired
	case endpointdata.EdgeEndpointProvided:
		return m.clearedendpointProvided
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EndpointDataMutation) ClearEdge(name string) error {
	switch name {
	case endpointdata.EdgeEndpointRequired:
		m.ClearEndpointRequired()
		return nil
	case endpointdata.EdgeEndpointProvided:
		m.ClearEndpointProvided()
		return nil
	}
	return fmt.Errorf("unknown EndpointData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EndpointDataMutation) ResetEdge(name string) error {
	switch name {
	case endpointdata.EdgeEndpointRequired:
		m.ResetEndpointRequired()
		return nil
	case endpointdata.EdgeEndpointProvided:
		m.ResetEndpointProvided()
		return nil
	}
	return fmt.Errorf("unknown EndpointData edge %s", name)
}

// ProviderEndpointMutation represents an operation that mutates the ProviderEndpoint nodes in the graph.
type ProviderEndpointMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	_path               *string
	_type               *string
	clearedFields       map[string]struct{}
	requiredData        map[int]struct{}
	removedrequiredData map[int]struct{}
	clearedrequiredData bool
	providedData        map[int]struct{}
	removedprovidedData map[int]struct{}
	clearedprovidedData bool
	done                bool
	oldValue            func(context.Context) (*ProviderEndpoint, error)
	predicates          []predicate.ProviderEndpoint
}

var _ ent.Mutation = (*ProviderEndpointMutation)(nil)

// providerendpointOption allows management of the mutation configuration using functional options.
type providerendpointOption func(*ProviderEndpointMutation)

// newProviderEndpointMutation creates new mutation for the ProviderEndpoint entity.
func newProviderEndpointMutation(c config, op Op, opts ...providerendpointOption) *ProviderEndpointMutation {
	m := &ProviderEndpointMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderEndpoint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderEndpointID sets the ID field of the mutation.
func withProviderEndpointID(id int) providerendpointOption {
	return func(m *ProviderEndpointMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderEndpoint
		)
		m.oldValue = func(ctx context.Context) (*ProviderEndpoint, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderEndpoint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderEndpoint sets the old ProviderEndpoint of the mutation.
func withProviderEndpoint(node *ProviderEndpoint) providerendpointOption {
	return func(m *ProviderEndpointMutation) {
		m.oldValue = func(context.Context) (*ProviderEndpoint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderEndpointMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderEndpointMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderEndpointMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderEndpointMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderEndpoint.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProviderEndpointMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProviderEndpointMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ProviderEndpoint entity.
// If the ProviderEndpoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderEndpointMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProviderEndpointMutation) ResetName() {
	m.name = nil
}

// SetPath sets the "path" field.
func (m *ProviderEndpointMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ProviderEndpointMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the ProviderEndpoint entity.
// If the ProviderEndpoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderEndpointMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *ProviderEndpointMutation) ResetPath() {
	m._path = nil
}

// SetType sets the "type" field.
func (m *ProviderEndpointMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ProviderEndpointMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the ProviderEndpoint entity.
// If the ProviderEndpoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderEndpointMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ProviderEndpointMutation) ResetType() {
	m._type = nil
}

// AddRequiredDatumIDs adds the "requiredData" edge to the EndpointData entity by ids.
func (m *ProviderEndpointMutation) AddRequiredDatumIDs(ids ...int) {
	if m.requiredData == nil {
		m.requiredData = make(map[int]struct{})
	}
	for i := range ids {
		m.requiredData[ids[i]] = struct{}{}
	}
}

// ClearRequiredData clears the "requiredData" edge to the EndpointData entity.
func (m *ProviderEndpointMutation) ClearRequiredData() {
	m.clearedrequiredData = true
}

// RequiredDataCleared reports if the "requiredData" edge to the EndpointData entity was cleared.
func (m *ProviderEndpointMutation) RequiredDataCleared() bool {
	return m.clearedrequiredData
}

// RemoveRequiredDatumIDs removes the "requiredData" edge to the EndpointData entity by IDs.
func (m *ProviderEndpointMutation) RemoveRequiredDatumIDs(ids ...int) {
	if m.removedrequiredData == nil {
		m.removedrequiredData = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.requiredData, ids[i])
		m.removedrequiredData[ids[i]] = struct{}{}
	}
}

// RemovedRequiredData returns the removed IDs of the "requiredData" edge to the EndpointData entity.
func (m *ProviderEndpointMutation) RemovedRequiredDataIDs() (ids []int) {
	for id := range m.removedrequiredData {
		ids = append(ids, id)
	}
	return
}

// RequiredDataIDs returns the "requiredData" edge IDs in the mutation.
func (m *ProviderEndpointMutation) RequiredDataIDs() (ids []int) {
	for id := range m.requiredData {
		ids = append(ids, id)
	}
	return
}

// ResetRequiredData resets all changes to the "requiredData" edge.
func (m *ProviderEndpointMutation) ResetRequiredData() {
	m.requiredData = nil
	m.clearedrequiredData = false
	m.removedrequiredData = nil
}

// AddProvidedDatumIDs adds the "providedData" edge to the EndpointData entity by ids.
func (m *ProviderEndpointMutation) AddProvidedDatumIDs(ids ...int) {
	if m.providedData == nil {
		m.providedData = make(map[int]struct{})
	}
	for i := range ids {
		m.providedData[ids[i]] = struct{}{}
	}
}

// ClearProvidedData clears the "providedData" edge to the EndpointData entity.
func (m *ProviderEndpointMutation) ClearProvidedData() {
	m.clearedprovidedData = true
}

// ProvidedDataCleared reports if the "providedData" edge to the EndpointData entity was cleared.
func (m *ProviderEndpointMutation) ProvidedDataCleared() bool {
	return m.clearedprovidedData
}

// RemoveProvidedDatumIDs removes the "providedData" edge to the EndpointData entity by IDs.
func (m *ProviderEndpointMutation) RemoveProvidedDatumIDs(ids ...int) {
	if m.removedprovidedData == nil {
		m.removedprovidedData = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.providedData, ids[i])
		m.removedprovidedData[ids[i]] = struct{}{}
	}
}

// RemovedProvidedData returns the removed IDs of the "providedData" edge to the EndpointData entity.
func (m *ProviderEndpointMutation) RemovedProvidedDataIDs() (ids []int) {
	for id := range m.removedprovidedData {
		ids = append(ids, id)
	}
	return
}

// ProvidedDataIDs returns the "providedData" edge IDs in the mutation.
func (m *ProviderEndpointMutation) ProvidedDataIDs() (ids []int) {
	for id := range m.providedData {
		ids = append(ids, id)
	}
	return
}

// ResetProvidedData resets all changes to the "providedData" edge.
func (m *ProviderEndpointMutation) ResetProvidedData() {
	m.providedData = nil
	m.clearedprovidedData = false
	m.removedprovidedData = nil
}

// Where appends a list predicates to the ProviderEndpointMutation builder.
func (m *ProviderEndpointMutation) Where(ps ...predicate.ProviderEndpoint) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProviderEndpointMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProviderEndpoint).
func (m *ProviderEndpointMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderEndpointMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, providerendpoint.FieldName)
	}
	if m._path != nil {
		fields = append(fields, providerendpoint.FieldPath)
	}
	if m._type != nil {
		fields = append(fields, providerendpoint.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderEndpointMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerendpoint.FieldName:
		return m.Name()
	case providerendpoint.FieldPath:
		return m.Path()
	case providerendpoint.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderEndpointMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerendpoint.FieldName:
		return m.OldName(ctx)
	case providerendpoint.FieldPath:
		return m.OldPath(ctx)
	case providerendpoint.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderEndpoint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderEndpointMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerendpoint.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case providerendpoint.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case providerendpoint.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderEndpoint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderEndpointMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderEndpointMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderEndpointMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProviderEndpoint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderEndpointMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderEndpointMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderEndpointMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProviderEndpoint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderEndpointMutation) ResetField(name string) error {
	switch name {
	case providerendpoint.FieldName:
		m.ResetName()
		return nil
	case providerendpoint.FieldPath:
		m.ResetPath()
		return nil
	case providerendpoint.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown ProviderEndpoint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderEndpointMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.requiredData != nil {
		edges = append(edges, providerendpoint.EdgeRequiredData)
	}
	if m.providedData != nil {
		edges = append(edges, providerendpoint.EdgeProvidedData)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderEndpointMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case providerendpoint.EdgeRequiredData:
		ids := make([]ent.Value, 0, len(m.requiredData))
		for id := range m.requiredData {
			ids = append(ids, id)
		}
		return ids
	case providerendpoint.EdgeProvidedData:
		ids := make([]ent.Value, 0, len(m.providedData))
		for id := range m.providedData {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderEndpointMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrequiredData != nil {
		edges = append(edges, providerendpoint.EdgeRequiredData)
	}
	if m.removedprovidedData != nil {
		edges = append(edges, providerendpoint.EdgeProvidedData)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderEndpointMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case providerendpoint.EdgeRequiredData:
		ids := make([]ent.Value, 0, len(m.removedrequiredData))
		for id := range m.removedrequiredData {
			ids = append(ids, id)
		}
		return ids
	case providerendpoint.EdgeProvidedData:
		ids := make([]ent.Value, 0, len(m.removedprovidedData))
		for id := range m.removedprovidedData {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderEndpointMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrequiredData {
		edges = append(edges, providerendpoint.EdgeRequiredData)
	}
	if m.clearedprovidedData {
		edges = append(edges, providerendpoint.EdgeProvidedData)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderEndpointMutation) EdgeCleared(name string) bool {
	switch name {
	case providerendpoint.EdgeRequiredData:
		return m.clearedrequiredData
	case providerendpoint.EdgeProvidedData:
		return m.clearedprovidedData
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderEndpointMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ProviderEndpoint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderEndpointMutation) ResetEdge(name string) error {
	switch name {
	case providerendpoint.EdgeRequiredData:
		m.ResetRequiredData()
		return nil
	case providerendpoint.EdgeProvidedData:
		m.ResetProvidedData()
		return nil
	}
	return fmt.Errorf("unknown ProviderEndpoint edge %s", name)
}

// ProviderRegisterDataMutation represents an operation that mutates the ProviderRegisterData nodes in the graph.
type ProviderRegisterDataMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	port            *string
	address         *string
	description     *string
	liveInterval    *int
	addliveInterval *int
	liveTimeout     *int
	addliveTimeout  *int
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*ProviderRegisterData, error)
	predicates      []predicate.ProviderRegisterData
}

var _ ent.Mutation = (*ProviderRegisterDataMutation)(nil)

// providerregisterdataOption allows management of the mutation configuration using functional options.
type providerregisterdataOption func(*ProviderRegisterDataMutation)

// newProviderRegisterDataMutation creates new mutation for the ProviderRegisterData entity.
func newProviderRegisterDataMutation(c config, op Op, opts ...providerregisterdataOption) *ProviderRegisterDataMutation {
	m := &ProviderRegisterDataMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderRegisterData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderRegisterDataID sets the ID field of the mutation.
func withProviderRegisterDataID(id int) providerregisterdataOption {
	return func(m *ProviderRegisterDataMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderRegisterData
		)
		m.oldValue = func(ctx context.Context) (*ProviderRegisterData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderRegisterData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderRegisterData sets the old ProviderRegisterData of the mutation.
func withProviderRegisterData(node *ProviderRegisterData) providerregisterdataOption {
	return func(m *ProviderRegisterDataMutation) {
		m.oldValue = func(context.Context) (*ProviderRegisterData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderRegisterDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderRegisterDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderRegisterDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderRegisterDataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderRegisterData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProviderRegisterDataMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProviderRegisterDataMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ProviderRegisterData entity.
// If the ProviderRegisterData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRegisterDataMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProviderRegisterDataMutation) ResetName() {
	m.name = nil
}

// SetPort sets the "port" field.
func (m *ProviderRegisterDataMutation) SetPort(s string) {
	m.port = &s
}

// Port returns the value of the "port" field in the mutation.
func (m *ProviderRegisterDataMutation) Port() (r string, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the ProviderRegisterData entity.
// If the ProviderRegisterData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRegisterDataMutation) OldPort(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// ResetPort resets all changes to the "port" field.
func (m *ProviderRegisterDataMutation) ResetPort() {
	m.port = nil
}

// SetAddress sets the "address" field.
func (m *ProviderRegisterDataMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ProviderRegisterDataMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the ProviderRegisterData entity.
// If the ProviderRegisterData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRegisterDataMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *ProviderRegisterDataMutation) ResetAddress() {
	m.address = nil
}

// SetDescription sets the "description" field.
func (m *ProviderRegisterDataMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProviderRegisterDataMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ProviderRegisterData entity.
// If the ProviderRegisterData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRegisterDataMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProviderRegisterDataMutation) ResetDescription() {
	m.description = nil
}

// SetLiveInterval sets the "liveInterval" field.
func (m *ProviderRegisterDataMutation) SetLiveInterval(i int) {
	m.liveInterval = &i
	m.addliveInterval = nil
}

// LiveInterval returns the value of the "liveInterval" field in the mutation.
func (m *ProviderRegisterDataMutation) LiveInterval() (r int, exists bool) {
	v := m.liveInterval
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveInterval returns the old "liveInterval" field's value of the ProviderRegisterData entity.
// If the ProviderRegisterData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRegisterDataMutation) OldLiveInterval(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveInterval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveInterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveInterval: %w", err)
	}
	return oldValue.LiveInterval, nil
}

// AddLiveInterval adds i to the "liveInterval" field.
func (m *ProviderRegisterDataMutation) AddLiveInterval(i int) {
	if m.addliveInterval != nil {
		*m.addliveInterval += i
	} else {
		m.addliveInterval = &i
	}
}

// AddedLiveInterval returns the value that was added to the "liveInterval" field in this mutation.
func (m *ProviderRegisterDataMutation) AddedLiveInterval() (r int, exists bool) {
	v := m.addliveInterval
	if v == nil {
		return
	}
	return *v, true
}

// ResetLiveInterval resets all changes to the "liveInterval" field.
func (m *ProviderRegisterDataMutation) ResetLiveInterval() {
	m.liveInterval = nil
	m.addliveInterval = nil
}

// SetLiveTimeout sets the "liveTimeout" field.
func (m *ProviderRegisterDataMutation) SetLiveTimeout(i int) {
	m.liveTimeout = &i
	m.addliveTimeout = nil
}

// LiveTimeout returns the value of the "liveTimeout" field in the mutation.
func (m *ProviderRegisterDataMutation) LiveTimeout() (r int, exists bool) {
	v := m.liveTimeout
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveTimeout returns the old "liveTimeout" field's value of the ProviderRegisterData entity.
// If the ProviderRegisterData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderRegisterDataMutation) OldLiveTimeout(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveTimeout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveTimeout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveTimeout: %w", err)
	}
	return oldValue.LiveTimeout, nil
}

// AddLiveTimeout adds i to the "liveTimeout" field.
func (m *ProviderRegisterDataMutation) AddLiveTimeout(i int) {
	if m.addliveTimeout != nil {
		*m.addliveTimeout += i
	} else {
		m.addliveTimeout = &i
	}
}

// AddedLiveTimeout returns the value that was added to the "liveTimeout" field in this mutation.
func (m *ProviderRegisterDataMutation) AddedLiveTimeout() (r int, exists bool) {
	v := m.addliveTimeout
	if v == nil {
		return
	}
	return *v, true
}

// ResetLiveTimeout resets all changes to the "liveTimeout" field.
func (m *ProviderRegisterDataMutation) ResetLiveTimeout() {
	m.liveTimeout = nil
	m.addliveTimeout = nil
}

// Where appends a list predicates to the ProviderRegisterDataMutation builder.
func (m *ProviderRegisterDataMutation) Where(ps ...predicate.ProviderRegisterData) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProviderRegisterDataMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProviderRegisterData).
func (m *ProviderRegisterDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderRegisterDataMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, providerregisterdata.FieldName)
	}
	if m.port != nil {
		fields = append(fields, providerregisterdata.FieldPort)
	}
	if m.address != nil {
		fields = append(fields, providerregisterdata.FieldAddress)
	}
	if m.description != nil {
		fields = append(fields, providerregisterdata.FieldDescription)
	}
	if m.liveInterval != nil {
		fields = append(fields, providerregisterdata.FieldLiveInterval)
	}
	if m.liveTimeout != nil {
		fields = append(fields, providerregisterdata.FieldLiveTimeout)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderRegisterDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerregisterdata.FieldName:
		return m.Name()
	case providerregisterdata.FieldPort:
		return m.Port()
	case providerregisterdata.FieldAddress:
		return m.Address()
	case providerregisterdata.FieldDescription:
		return m.Description()
	case providerregisterdata.FieldLiveInterval:
		return m.LiveInterval()
	case providerregisterdata.FieldLiveTimeout:
		return m.LiveTimeout()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderRegisterDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerregisterdata.FieldName:
		return m.OldName(ctx)
	case providerregisterdata.FieldPort:
		return m.OldPort(ctx)
	case providerregisterdata.FieldAddress:
		return m.OldAddress(ctx)
	case providerregisterdata.FieldDescription:
		return m.OldDescription(ctx)
	case providerregisterdata.FieldLiveInterval:
		return m.OldLiveInterval(ctx)
	case providerregisterdata.FieldLiveTimeout:
		return m.OldLiveTimeout(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderRegisterData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderRegisterDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerregisterdata.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case providerregisterdata.FieldPort:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case providerregisterdata.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case providerregisterdata.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case providerregisterdata.FieldLiveInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveInterval(v)
		return nil
	case providerregisterdata.FieldLiveTimeout:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveTimeout(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderRegisterData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderRegisterDataMutation) AddedFields() []string {
	var fields []string
	if m.addliveInterval != nil {
		fields = append(fields, providerregisterdata.FieldLiveInterval)
	}
	if m.addliveTimeout != nil {
		fields = append(fields, providerregisterdata.FieldLiveTimeout)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderRegisterDataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case providerregisterdata.FieldLiveInterval:
		return m.AddedLiveInterval()
	case providerregisterdata.FieldLiveTimeout:
		return m.AddedLiveTimeout()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderRegisterDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case providerregisterdata.FieldLiveInterval:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLiveInterval(v)
		return nil
	case providerregisterdata.FieldLiveTimeout:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLiveTimeout(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderRegisterData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderRegisterDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderRegisterDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderRegisterDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProviderRegisterData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderRegisterDataMutation) ResetField(name string) error {
	switch name {
	case providerregisterdata.FieldName:
		m.ResetName()
		return nil
	case providerregisterdata.FieldPort:
		m.ResetPort()
		return nil
	case providerregisterdata.FieldAddress:
		m.ResetAddress()
		return nil
	case providerregisterdata.FieldDescription:
		m.ResetDescription()
		return nil
	case providerregisterdata.FieldLiveInterval:
		m.ResetLiveInterval()
		return nil
	case providerregisterdata.FieldLiveTimeout:
		m.ResetLiveTimeout()
		return nil
	}
	return fmt.Errorf("unknown ProviderRegisterData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderRegisterDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderRegisterDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderRegisterDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderRegisterDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderRegisterDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderRegisterDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderRegisterDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProviderRegisterData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderRegisterDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProviderRegisterData edge %s", name)
}
