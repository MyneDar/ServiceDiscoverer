// Code generated by ent, DO NOT EDIT.

package ogent

import "servicediscoverer/ent"

func NewEndpointDataCreate(e *ent.EndpointData) *EndpointDataCreate {
	if e == nil {
		return nil
	}
	var ret EndpointDataCreate
	ret.ID = e.ID
	ret.DataName = e.DataName
	ret.Description = e.Description
	ret.Type = e.Type
	return &ret
}

func NewEndpointDataCreates(es []*ent.EndpointData) []EndpointDataCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]EndpointDataCreate, len(es))
	for i, e := range es {
		r[i] = NewEndpointDataCreate(e).Elem()
	}
	return r
}

func (ed *EndpointDataCreate) Elem() EndpointDataCreate {
	if ed == nil {
		return EndpointDataCreate{}
	}
	return *ed
}

func NewEndpointDataList(e *ent.EndpointData) *EndpointDataList {
	if e == nil {
		return nil
	}
	var ret EndpointDataList
	ret.ID = e.ID
	ret.DataName = e.DataName
	ret.Description = e.Description
	ret.Type = e.Type
	return &ret
}

func NewEndpointDataLists(es []*ent.EndpointData) []EndpointDataList {
	if len(es) == 0 {
		return nil
	}
	r := make([]EndpointDataList, len(es))
	for i, e := range es {
		r[i] = NewEndpointDataList(e).Elem()
	}
	return r
}

func (ed *EndpointDataList) Elem() EndpointDataList {
	if ed == nil {
		return EndpointDataList{}
	}
	return *ed
}

func NewEndpointDataRead(e *ent.EndpointData) *EndpointDataRead {
	if e == nil {
		return nil
	}
	var ret EndpointDataRead
	ret.ID = e.ID
	ret.DataName = e.DataName
	ret.Description = e.Description
	ret.Type = e.Type
	return &ret
}

func NewEndpointDataReads(es []*ent.EndpointData) []EndpointDataRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EndpointDataRead, len(es))
	for i, e := range es {
		r[i] = NewEndpointDataRead(e).Elem()
	}
	return r
}

func (ed *EndpointDataRead) Elem() EndpointDataRead {
	if ed == nil {
		return EndpointDataRead{}
	}
	return *ed
}

func NewEndpointDataUpdate(e *ent.EndpointData) *EndpointDataUpdate {
	if e == nil {
		return nil
	}
	var ret EndpointDataUpdate
	ret.ID = e.ID
	ret.DataName = e.DataName
	ret.Description = e.Description
	ret.Type = e.Type
	return &ret
}

func NewEndpointDataUpdates(es []*ent.EndpointData) []EndpointDataUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]EndpointDataUpdate, len(es))
	for i, e := range es {
		r[i] = NewEndpointDataUpdate(e).Elem()
	}
	return r
}

func (ed *EndpointDataUpdate) Elem() EndpointDataUpdate {
	if ed == nil {
		return EndpointDataUpdate{}
	}
	return *ed
}

func NewEndpointDataEndpointProvidedRead(e *ent.ProviderEndpoint) *EndpointDataEndpointProvidedRead {
	if e == nil {
		return nil
	}
	var ret EndpointDataEndpointProvidedRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Path = e.Path
	ret.Type = e.Type
	ret.Description = e.Description
	return &ret
}

func NewEndpointDataEndpointProvidedReads(es []*ent.ProviderEndpoint) []EndpointDataEndpointProvidedRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EndpointDataEndpointProvidedRead, len(es))
	for i, e := range es {
		r[i] = NewEndpointDataEndpointProvidedRead(e).Elem()
	}
	return r
}

func (pe *EndpointDataEndpointProvidedRead) Elem() EndpointDataEndpointProvidedRead {
	if pe == nil {
		return EndpointDataEndpointProvidedRead{}
	}
	return *pe
}

func NewEndpointDataEndpointRequiredRead(e *ent.ProviderEndpoint) *EndpointDataEndpointRequiredRead {
	if e == nil {
		return nil
	}
	var ret EndpointDataEndpointRequiredRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Path = e.Path
	ret.Type = e.Type
	ret.Description = e.Description
	return &ret
}

func NewEndpointDataEndpointRequiredReads(es []*ent.ProviderEndpoint) []EndpointDataEndpointRequiredRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EndpointDataEndpointRequiredRead, len(es))
	for i, e := range es {
		r[i] = NewEndpointDataEndpointRequiredRead(e).Elem()
	}
	return r
}

func (pe *EndpointDataEndpointRequiredRead) Elem() EndpointDataEndpointRequiredRead {
	if pe == nil {
		return EndpointDataEndpointRequiredRead{}
	}
	return *pe
}

func NewProviderEndpointCreate(e *ent.ProviderEndpoint) *ProviderEndpointCreate {
	if e == nil {
		return nil
	}
	var ret ProviderEndpointCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Path = e.Path
	ret.Type = e.Type
	ret.Description = e.Description
	return &ret
}

func NewProviderEndpointCreates(es []*ent.ProviderEndpoint) []ProviderEndpointCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderEndpointCreate, len(es))
	for i, e := range es {
		r[i] = NewProviderEndpointCreate(e).Elem()
	}
	return r
}

func (pe *ProviderEndpointCreate) Elem() ProviderEndpointCreate {
	if pe == nil {
		return ProviderEndpointCreate{}
	}
	return *pe
}

func NewProviderEndpointList(e *ent.ProviderEndpoint) *ProviderEndpointList {
	if e == nil {
		return nil
	}
	var ret ProviderEndpointList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Path = e.Path
	ret.Type = e.Type
	ret.Description = e.Description
	return &ret
}

func NewProviderEndpointLists(es []*ent.ProviderEndpoint) []ProviderEndpointList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderEndpointList, len(es))
	for i, e := range es {
		r[i] = NewProviderEndpointList(e).Elem()
	}
	return r
}

func (pe *ProviderEndpointList) Elem() ProviderEndpointList {
	if pe == nil {
		return ProviderEndpointList{}
	}
	return *pe
}

func NewProviderEndpointRead(e *ent.ProviderEndpoint) *ProviderEndpointRead {
	if e == nil {
		return nil
	}
	var ret ProviderEndpointRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Path = e.Path
	ret.Type = e.Type
	ret.Description = e.Description
	return &ret
}

func NewProviderEndpointReads(es []*ent.ProviderEndpoint) []ProviderEndpointRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderEndpointRead, len(es))
	for i, e := range es {
		r[i] = NewProviderEndpointRead(e).Elem()
	}
	return r
}

func (pe *ProviderEndpointRead) Elem() ProviderEndpointRead {
	if pe == nil {
		return ProviderEndpointRead{}
	}
	return *pe
}

func NewProviderEndpointUpdate(e *ent.ProviderEndpoint) *ProviderEndpointUpdate {
	if e == nil {
		return nil
	}
	var ret ProviderEndpointUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Path = e.Path
	ret.Type = e.Type
	ret.Description = e.Description
	return &ret
}

func NewProviderEndpointUpdates(es []*ent.ProviderEndpoint) []ProviderEndpointUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderEndpointUpdate, len(es))
	for i, e := range es {
		r[i] = NewProviderEndpointUpdate(e).Elem()
	}
	return r
}

func (pe *ProviderEndpointUpdate) Elem() ProviderEndpointUpdate {
	if pe == nil {
		return ProviderEndpointUpdate{}
	}
	return *pe
}

func NewProviderEndpointProvidedDataList(e *ent.EndpointData) *ProviderEndpointProvidedDataList {
	if e == nil {
		return nil
	}
	var ret ProviderEndpointProvidedDataList
	ret.ID = e.ID
	ret.DataName = e.DataName
	ret.Description = e.Description
	ret.Type = e.Type
	return &ret
}

func NewProviderEndpointProvidedDataLists(es []*ent.EndpointData) []ProviderEndpointProvidedDataList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderEndpointProvidedDataList, len(es))
	for i, e := range es {
		r[i] = NewProviderEndpointProvidedDataList(e).Elem()
	}
	return r
}

func (ed *ProviderEndpointProvidedDataList) Elem() ProviderEndpointProvidedDataList {
	if ed == nil {
		return ProviderEndpointProvidedDataList{}
	}
	return *ed
}

func NewProviderEndpointProviderRead(e *ent.ProviderRegisterData) *ProviderEndpointProviderRead {
	if e == nil {
		return nil
	}
	var ret ProviderEndpointProviderRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Port = e.Port
	ret.Address = e.Address
	ret.Description = e.Description
	ret.LiveInterval = e.LiveInterval
	ret.LiveTimeout = e.LiveTimeout
	return &ret
}

func NewProviderEndpointProviderReads(es []*ent.ProviderRegisterData) []ProviderEndpointProviderRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderEndpointProviderRead, len(es))
	for i, e := range es {
		r[i] = NewProviderEndpointProviderRead(e).Elem()
	}
	return r
}

func (prd *ProviderEndpointProviderRead) Elem() ProviderEndpointProviderRead {
	if prd == nil {
		return ProviderEndpointProviderRead{}
	}
	return *prd
}

func NewProviderEndpointRequiredDataList(e *ent.EndpointData) *ProviderEndpointRequiredDataList {
	if e == nil {
		return nil
	}
	var ret ProviderEndpointRequiredDataList
	ret.ID = e.ID
	ret.DataName = e.DataName
	ret.Description = e.Description
	ret.Type = e.Type
	return &ret
}

func NewProviderEndpointRequiredDataLists(es []*ent.EndpointData) []ProviderEndpointRequiredDataList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderEndpointRequiredDataList, len(es))
	for i, e := range es {
		r[i] = NewProviderEndpointRequiredDataList(e).Elem()
	}
	return r
}

func (ed *ProviderEndpointRequiredDataList) Elem() ProviderEndpointRequiredDataList {
	if ed == nil {
		return ProviderEndpointRequiredDataList{}
	}
	return *ed
}

func NewProviderRegisterDataCreate(e *ent.ProviderRegisterData) *ProviderRegisterDataCreate {
	if e == nil {
		return nil
	}
	var ret ProviderRegisterDataCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Port = e.Port
	ret.Address = e.Address
	ret.Description = e.Description
	ret.LiveInterval = e.LiveInterval
	ret.LiveTimeout = e.LiveTimeout
	return &ret
}

func NewProviderRegisterDataCreates(es []*ent.ProviderRegisterData) []ProviderRegisterDataCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderRegisterDataCreate, len(es))
	for i, e := range es {
		r[i] = NewProviderRegisterDataCreate(e).Elem()
	}
	return r
}

func (prd *ProviderRegisterDataCreate) Elem() ProviderRegisterDataCreate {
	if prd == nil {
		return ProviderRegisterDataCreate{}
	}
	return *prd
}

func NewProviderRegisterDataList(e *ent.ProviderRegisterData) *ProviderRegisterDataList {
	if e == nil {
		return nil
	}
	var ret ProviderRegisterDataList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Port = e.Port
	ret.Address = e.Address
	ret.Description = e.Description
	ret.LiveInterval = e.LiveInterval
	ret.LiveTimeout = e.LiveTimeout
	return &ret
}

func NewProviderRegisterDataLists(es []*ent.ProviderRegisterData) []ProviderRegisterDataList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderRegisterDataList, len(es))
	for i, e := range es {
		r[i] = NewProviderRegisterDataList(e).Elem()
	}
	return r
}

func (prd *ProviderRegisterDataList) Elem() ProviderRegisterDataList {
	if prd == nil {
		return ProviderRegisterDataList{}
	}
	return *prd
}

func NewProviderRegisterDataRead(e *ent.ProviderRegisterData) *ProviderRegisterDataRead {
	if e == nil {
		return nil
	}
	var ret ProviderRegisterDataRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Port = e.Port
	ret.Address = e.Address
	ret.Description = e.Description
	ret.LiveInterval = e.LiveInterval
	ret.LiveTimeout = e.LiveTimeout
	return &ret
}

func NewProviderRegisterDataReads(es []*ent.ProviderRegisterData) []ProviderRegisterDataRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderRegisterDataRead, len(es))
	for i, e := range es {
		r[i] = NewProviderRegisterDataRead(e).Elem()
	}
	return r
}

func (prd *ProviderRegisterDataRead) Elem() ProviderRegisterDataRead {
	if prd == nil {
		return ProviderRegisterDataRead{}
	}
	return *prd
}

func NewProviderRegisterDataUpdate(e *ent.ProviderRegisterData) *ProviderRegisterDataUpdate {
	if e == nil {
		return nil
	}
	var ret ProviderRegisterDataUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Port = e.Port
	ret.Address = e.Address
	ret.Description = e.Description
	ret.LiveInterval = e.LiveInterval
	ret.LiveTimeout = e.LiveTimeout
	return &ret
}

func NewProviderRegisterDataUpdates(es []*ent.ProviderRegisterData) []ProviderRegisterDataUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderRegisterDataUpdate, len(es))
	for i, e := range es {
		r[i] = NewProviderRegisterDataUpdate(e).Elem()
	}
	return r
}

func (prd *ProviderRegisterDataUpdate) Elem() ProviderRegisterDataUpdate {
	if prd == nil {
		return ProviderRegisterDataUpdate{}
	}
	return *prd
}

func NewProviderRegisterDataEndpointsList(e *ent.ProviderEndpoint) *ProviderRegisterDataEndpointsList {
	if e == nil {
		return nil
	}
	var ret ProviderRegisterDataEndpointsList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Path = e.Path
	ret.Type = e.Type
	ret.Description = e.Description
	return &ret
}

func NewProviderRegisterDataEndpointsLists(es []*ent.ProviderEndpoint) []ProviderRegisterDataEndpointsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ProviderRegisterDataEndpointsList, len(es))
	for i, e := range es {
		r[i] = NewProviderRegisterDataEndpointsList(e).Elem()
	}
	return r
}

func (pe *ProviderRegisterDataEndpointsList) Elem() ProviderRegisterDataEndpointsList {
	if pe == nil {
		return ProviderRegisterDataEndpointsList{}
	}
	return *pe
}
