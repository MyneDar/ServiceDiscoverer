// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'e': // Prefix: "endpoint-data"
				if l := len("endpoint-data"); len(elem) >= l && elem[0:l] == "endpoint-data" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListEndpointDataRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateEndpointDataRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteEndpointDataRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadEndpointDataRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateEndpointDataRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/endpoint-"
						if l := len("/endpoint-"); len(elem) >= l && elem[0:l] == "/endpoint-" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'p': // Prefix: "provided"
							if l := len("provided"); len(elem) >= l && elem[0:l] == "provided" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadEndpointDataEndpointProvidedRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'r': // Prefix: "required"
							if l := len("required"); len(elem) >= l && elem[0:l] == "required" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadEndpointDataEndpointRequiredRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 'p': // Prefix: "provider-"
				if l := len("provider-"); len(elem) >= l && elem[0:l] == "provider-" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "endpoints"
					if l := len("endpoints"); len(elem) >= l && elem[0:l] == "endpoints" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListProviderEndpointRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateProviderEndpointRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteProviderEndpointRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadProviderEndpointRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateProviderEndpointRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "provide"
								if l := len("provide"); len(elem) >= l && elem[0:l] == "provide" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "d-data"
									if l := len("d-data"); len(elem) >= l && elem[0:l] == "d-data" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListProviderEndpointProvidedDataRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'r': // Prefix: "r"
									if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadProviderEndpointProviderRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							case 'r': // Prefix: "required-data"
								if l := len("required-data"); len(elem) >= l && elem[0:l] == "required-data" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListProviderEndpointRequiredDataRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 'r': // Prefix: "register-data"
					if l := len("register-data"); len(elem) >= l && elem[0:l] == "register-data" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListProviderRegisterDataRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateProviderRegisterDataRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteProviderRegisterDataRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadProviderRegisterDataRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateProviderRegisterDataRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/endpoints"
							if l := len("/endpoints"); len(elem) >= l && elem[0:l] == "/endpoints" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListProviderRegisterDataEndpointsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'e': // Prefix: "endpoint-data"
				if l := len("endpoint-data"); len(elem) >= l && elem[0:l] == "endpoint-data" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListEndpointData"
						r.operationID = "listEndpointData"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateEndpointData"
						r.operationID = "createEndpointData"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteEndpointData"
							r.operationID = "deleteEndpointData"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadEndpointData"
							r.operationID = "readEndpointData"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateEndpointData"
							r.operationID = "updateEndpointData"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/endpoint-"
						if l := len("/endpoint-"); len(elem) >= l && elem[0:l] == "/endpoint-" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'p': // Prefix: "provided"
							if l := len("provided"); len(elem) >= l && elem[0:l] == "provided" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadEndpointDataEndpointProvided
									r.name = "ReadEndpointDataEndpointProvided"
									r.operationID = "readEndpointDataEndpointProvided"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'r': // Prefix: "required"
							if l := len("required"); len(elem) >= l && elem[0:l] == "required" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadEndpointDataEndpointRequired
									r.name = "ReadEndpointDataEndpointRequired"
									r.operationID = "readEndpointDataEndpointRequired"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'p': // Prefix: "provider-"
				if l := len("provider-"); len(elem) >= l && elem[0:l] == "provider-" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "endpoints"
					if l := len("endpoints"); len(elem) >= l && elem[0:l] == "endpoints" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListProviderEndpoint"
							r.operationID = "listProviderEndpoint"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateProviderEndpoint"
							r.operationID = "createProviderEndpoint"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteProviderEndpoint"
								r.operationID = "deleteProviderEndpoint"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadProviderEndpoint"
								r.operationID = "readProviderEndpoint"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateProviderEndpoint"
								r.operationID = "updateProviderEndpoint"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "provide"
								if l := len("provide"); len(elem) >= l && elem[0:l] == "provide" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "d-data"
									if l := len("d-data"); len(elem) >= l && elem[0:l] == "d-data" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListProviderEndpointProvidedData
											r.name = "ListProviderEndpointProvidedData"
											r.operationID = "listProviderEndpointProvidedData"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 'r': // Prefix: "r"
									if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadProviderEndpointProvider
											r.name = "ReadProviderEndpointProvider"
											r.operationID = "readProviderEndpointProvider"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							case 'r': // Prefix: "required-data"
								if l := len("required-data"); len(elem) >= l && elem[0:l] == "required-data" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListProviderEndpointRequiredData
										r.name = "ListProviderEndpointRequiredData"
										r.operationID = "listProviderEndpointRequiredData"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 'r': // Prefix: "register-data"
					if l := len("register-data"); len(elem) >= l && elem[0:l] == "register-data" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListProviderRegisterData"
							r.operationID = "listProviderRegisterData"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateProviderRegisterData"
							r.operationID = "createProviderRegisterData"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteProviderRegisterData"
								r.operationID = "deleteProviderRegisterData"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadProviderRegisterData"
								r.operationID = "readProviderRegisterData"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateProviderRegisterData"
								r.operationID = "updateProviderRegisterData"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/endpoints"
							if l := len("/endpoints"); len(elem) >= l && elem[0:l] == "/endpoints" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListProviderRegisterDataEndpoints
									r.name = "ListProviderRegisterDataEndpoints"
									r.operationID = "listProviderRegisterDataEndpoints"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
