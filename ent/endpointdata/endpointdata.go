// Code generated by ent, DO NOT EDIT.

package endpointdata

const (
	// Label holds the string label denoting the endpointdata type in the database.
	Label = "endpoint_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDataName holds the string denoting the dataname field in the database.
	FieldDataName = "data_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeEndpointRequired holds the string denoting the endpoint_required edge name in mutations.
	EdgeEndpointRequired = "endpoint_required"
	// EdgeEndpointProvided holds the string denoting the endpoint_provided edge name in mutations.
	EdgeEndpointProvided = "endpoint_provided"
	// Table holds the table name of the endpointdata in the database.
	Table = "endpoint_data"
	// EndpointRequiredTable is the table that holds the endpoint_required relation/edge.
	EndpointRequiredTable = "endpoint_data"
	// EndpointRequiredInverseTable is the table name for the ProviderEndpoint entity.
	// It exists in this package in order to avoid circular dependency with the "providerendpoint" package.
	EndpointRequiredInverseTable = "provider_endpoints"
	// EndpointRequiredColumn is the table column denoting the endpoint_required relation/edge.
	EndpointRequiredColumn = "provider_endpoint_required_data"
	// EndpointProvidedTable is the table that holds the endpoint_provided relation/edge.
	EndpointProvidedTable = "endpoint_data"
	// EndpointProvidedInverseTable is the table name for the ProviderEndpoint entity.
	// It exists in this package in order to avoid circular dependency with the "providerendpoint" package.
	EndpointProvidedInverseTable = "provider_endpoints"
	// EndpointProvidedColumn is the table column denoting the endpoint_provided relation/edge.
	EndpointProvidedColumn = "provider_endpoint_provided_data"
)

// Columns holds all SQL columns for endpointdata fields.
var Columns = []string{
	FieldID,
	FieldDataName,
	FieldDescription,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "endpoint_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"provider_endpoint_required_data",
	"provider_endpoint_provided_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
