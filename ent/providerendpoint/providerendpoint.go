// Code generated by ent, DO NOT EDIT.

package providerendpoint

const (
	// Label holds the string label denoting the providerendpoint type in the database.
	Label = "provider_endpoint"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeRequiredData holds the string denoting the requireddata edge name in mutations.
	EdgeRequiredData = "requiredData"
	// EdgeProvidedData holds the string denoting the provideddata edge name in mutations.
	EdgeProvidedData = "providedData"
	// Table holds the table name of the providerendpoint in the database.
	Table = "provider_endpoints"
	// RequiredDataTable is the table that holds the requiredData relation/edge.
	RequiredDataTable = "endpoint_data"
	// RequiredDataInverseTable is the table name for the EndpointData entity.
	// It exists in this package in order to avoid circular dependency with the "endpointdata" package.
	RequiredDataInverseTable = "endpoint_data"
	// RequiredDataColumn is the table column denoting the requiredData relation/edge.
	RequiredDataColumn = "provider_endpoint_required_data"
	// ProvidedDataTable is the table that holds the providedData relation/edge.
	ProvidedDataTable = "endpoint_data"
	// ProvidedDataInverseTable is the table name for the EndpointData entity.
	// It exists in this package in order to avoid circular dependency with the "endpointdata" package.
	ProvidedDataInverseTable = "endpoint_data"
	// ProvidedDataColumn is the table column denoting the providedData relation/edge.
	ProvidedDataColumn = "provider_endpoint_provided_data"
)

// Columns holds all SQL columns for providerendpoint fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPath,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
